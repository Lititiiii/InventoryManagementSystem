//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 2024/9/6 0:31:18
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata


#endregion

namespace ImModel
{

    #region ImEntities

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class ImEntities : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new ImEntities object.
        /// </summary>
        public ImEntities() :
                base(@"metadata=DataModel1.csdl|DataModel1.ssdl|DataModel1.msl;provider=Devart.Data.MySql;provider connection string=""User Id=IMS;Password=Cy2Ni5r6GH8aE4B6;Host=92.run;Database=ims;Unicode=True;Persist Security Info=True""", "ImEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initializes a new ImEntities object using the connection string found in the 'ImEntities' section of the application configuration file.
        /// </summary>
        public ImEntities(string connectionString) :
                base(connectionString, "ImEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new ImEntities object.
        /// </summary>
        public ImEntities(EntityConnection connection) : base(connection, "ImEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// ImEntities static constructor.
        /// </summary>
        static ImEntities()
        {
            System.Data.Entity.DbConfiguration.SetConfiguration(new Devart.Data.MySql.Entity.MySqlEntityProviderServicesConfiguration());
        }


        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AccidentLevel> AccidentLevels
        {
            get
            {
                if ((_AccidentLevels == null))
                {
                    _AccidentLevels = base.CreateObjectSet<AccidentLevel>("AccidentLevels");
                }
                return _AccidentLevels;
            }
        }
        private ObjectSet<AccidentLevel> _AccidentLevels;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AccidentNature> AccidentNatures
        {
            get
            {
                if ((_AccidentNatures == null))
                {
                    _AccidentNatures = base.CreateObjectSet<AccidentNature>("AccidentNatures");
                }
                return _AccidentNatures;
            }
        }
        private ObjectSet<AccidentNature> _AccidentNatures;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AccidentReport> AccidentReports
        {
            get
            {
                if ((_AccidentReports == null))
                {
                    _AccidentReports = base.CreateObjectSet<AccidentReport>("AccidentReports");
                }
                return _AccidentReports;
            }
        }
        private ObjectSet<AccidentReport> _AccidentReports;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DepartmentTable> DepartmentTables
        {
            get
            {
                if ((_DepartmentTables == null))
                {
                    _DepartmentTables = base.CreateObjectSet<DepartmentTable>("DepartmentTables");
                }
                return _DepartmentTables;
            }
        }
        private ObjectSet<DepartmentTable> _DepartmentTables;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DocumentManagement> DocumentManagements
        {
            get
            {
                if ((_DocumentManagements == null))
                {
                    _DocumentManagements = base.CreateObjectSet<DocumentManagement>("DocumentManagements");
                }
                return _DocumentManagements;
            }
        }
        private ObjectSet<DocumentManagement> _DocumentManagements;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EquipmentInfo> EquipmentInfos
        {
            get
            {
                if ((_EquipmentInfos == null))
                {
                    _EquipmentInfos = base.CreateObjectSet<EquipmentInfo>("EquipmentInfos");
                }
                return _EquipmentInfos;
            }
        }
        private ObjectSet<EquipmentInfo> _EquipmentInfos;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EquipmentMaintenanceRecord> EquipmentMaintenanceRecords
        {
            get
            {
                if ((_EquipmentMaintenanceRecords == null))
                {
                    _EquipmentMaintenanceRecords = base.CreateObjectSet<EquipmentMaintenanceRecord>("EquipmentMaintenanceRecords");
                }
                return _EquipmentMaintenanceRecords;
            }
        }
        private ObjectSet<EquipmentMaintenanceRecord> _EquipmentMaintenanceRecords;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EquipmentMaintenanceReplacementSparePart> EquipmentMaintenanceReplacementSpareParts
        {
            get
            {
                if ((_EquipmentMaintenanceReplacementSpareParts == null))
                {
                    _EquipmentMaintenanceReplacementSpareParts = base.CreateObjectSet<EquipmentMaintenanceReplacementSparePart>("EquipmentMaintenanceReplacementSpareParts");
                }
                return _EquipmentMaintenanceReplacementSpareParts;
            }
        }
        private ObjectSet<EquipmentMaintenanceReplacementSparePart> _EquipmentMaintenanceReplacementSpareParts;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EquipmentType> EquipmentTypes
        {
            get
            {
                if ((_EquipmentTypes == null))
                {
                    _EquipmentTypes = base.CreateObjectSet<EquipmentType>("EquipmentTypes");
                }
                return _EquipmentTypes;
            }
        }
        private ObjectSet<EquipmentType> _EquipmentTypes;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FaultCategory> FaultCategories
        {
            get
            {
                if ((_FaultCategories == null))
                {
                    _FaultCategories = base.CreateObjectSet<FaultCategory>("FaultCategories");
                }
                return _FaultCategories;
            }
        }
        private ObjectSet<FaultCategory> _FaultCategories;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<InstallationLocationInfo> InstallationLocationInfos
        {
            get
            {
                if ((_InstallationLocationInfos == null))
                {
                    _InstallationLocationInfos = base.CreateObjectSet<InstallationLocationInfo>("InstallationLocationInfos");
                }
                return _InstallationLocationInfos;
            }
        }
        private ObjectSet<InstallationLocationInfo> _InstallationLocationInfos;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MaintenanceLevel> MaintenanceLevels
        {
            get
            {
                if ((_MaintenanceLevels == null))
                {
                    _MaintenanceLevels = base.CreateObjectSet<MaintenanceLevel>("MaintenanceLevels");
                }
                return _MaintenanceLevels;
            }
        }
        private ObjectSet<MaintenanceLevel> _MaintenanceLevels;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PartnerInfo> PartnerInfos
        {
            get
            {
                if ((_PartnerInfos == null))
                {
                    _PartnerInfos = base.CreateObjectSet<PartnerInfo>("PartnerInfos");
                }
                return _PartnerInfos;
            }
        }
        private ObjectSet<PartnerInfo> _PartnerInfos;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SparePartInfo> SparePartInfos
        {
            get
            {
                if ((_SparePartInfos == null))
                {
                    _SparePartInfos = base.CreateObjectSet<SparePartInfo>("SparePartInfos");
                }
                return _SparePartInfos;
            }
        }
        private ObjectSet<SparePartInfo> _SparePartInfos;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SparePartInventoryChangeHistory> SparePartInventoryChangeHistories
        {
            get
            {
                if ((_SparePartInventoryChangeHistories == null))
                {
                    _SparePartInventoryChangeHistories = base.CreateObjectSet<SparePartInventoryChangeHistory>("SparePartInventoryChangeHistories");
                }
                return _SparePartInventoryChangeHistories;
            }
        }
        private ObjectSet<SparePartInventoryChangeHistory> _SparePartInventoryChangeHistories;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SparePartInventoryChangeReason> SparePartInventoryChangeReasons
        {
            get
            {
                if ((_SparePartInventoryChangeReasons == null))
                {
                    _SparePartInventoryChangeReasons = base.CreateObjectSet<SparePartInventoryChangeReason>("SparePartInventoryChangeReasons");
                }
                return _SparePartInventoryChangeReasons;
            }
        }
        private ObjectSet<SparePartInventoryChangeReason> _SparePartInventoryChangeReasons;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SparePartInventoryCheck> SparePartInventoryChecks
        {
            get
            {
                if ((_SparePartInventoryChecks == null))
                {
                    _SparePartInventoryChecks = base.CreateObjectSet<SparePartInventoryCheck>("SparePartInventoryChecks");
                }
                return _SparePartInventoryChecks;
            }
        }
        private ObjectSet<SparePartInventoryCheck> _SparePartInventoryChecks;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SparePartInventoryCheckDetail> SparePartInventoryCheckDetails
        {
            get
            {
                if ((_SparePartInventoryCheckDetails == null))
                {
                    _SparePartInventoryCheckDetails = base.CreateObjectSet<SparePartInventoryCheckDetail>("SparePartInventoryCheckDetails");
                }
                return _SparePartInventoryCheckDetails;
            }
        }
        private ObjectSet<SparePartInventoryCheckDetail> _SparePartInventoryCheckDetails;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SparePartType> SparePartTypes
        {
            get
            {
                if ((_SparePartTypes == null))
                {
                    _SparePartTypes = base.CreateObjectSet<SparePartType>("SparePartTypes");
                }
                return _SparePartTypes;
            }
        }
        private ObjectSet<SparePartType> _SparePartTypes;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UnitOfMeasurement> UnitOfMeasurements
        {
            get
            {
                if ((_UnitOfMeasurements == null))
                {
                    _UnitOfMeasurements = base.CreateObjectSet<UnitOfMeasurement>("UnitOfMeasurements");
                }
                return _UnitOfMeasurements;
            }
        }
        private ObjectSet<UnitOfMeasurement> _UnitOfMeasurements;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UnitType> UnitTypes
        {
            get
            {
                if ((_UnitTypes == null))
                {
                    _UnitTypes = base.CreateObjectSet<UnitType>("UnitTypes");
                }
                return _UnitTypes;
            }
        }
        private ObjectSet<UnitType> _UnitTypes;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserInfoView> UserInfoViews
        {
            get
            {
                if ((_UserInfoViews == null))
                {
                    _UserInfoViews = base.CreateObjectSet<UserInfoView>("UserInfoViews");
                }
                return _UserInfoViews;
            }
        }
        private ObjectSet<UserInfoView> _UserInfoViews;

        #endregion
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the AccidentLevels EntitySet.
        /// </summary>
        public void AddToAccidentLevels(AccidentLevel accidentLevel)
        {
            base.AddObject("AccidentLevels", accidentLevel);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the AccidentNatures EntitySet.
        /// </summary>
        public void AddToAccidentNatures(AccidentNature accidentNature)
        {
            base.AddObject("AccidentNatures", accidentNature);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the AccidentReports EntitySet.
        /// </summary>
        public void AddToAccidentReports(AccidentReport accidentReport)
        {
            base.AddObject("AccidentReports", accidentReport);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the DepartmentTables EntitySet.
        /// </summary>
        public void AddToDepartmentTables(DepartmentTable departmentTable)
        {
            base.AddObject("DepartmentTables", departmentTable);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the DocumentManagements EntitySet.
        /// </summary>
        public void AddToDocumentManagements(DocumentManagement documentManagement)
        {
            base.AddObject("DocumentManagements", documentManagement);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the EquipmentInfos EntitySet.
        /// </summary>
        public void AddToEquipmentInfos(EquipmentInfo equipmentInfo)
        {
            base.AddObject("EquipmentInfos", equipmentInfo);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the EquipmentMaintenanceRecords EntitySet.
        /// </summary>
        public void AddToEquipmentMaintenanceRecords(EquipmentMaintenanceRecord equipmentMaintenanceRecord)
        {
            base.AddObject("EquipmentMaintenanceRecords", equipmentMaintenanceRecord);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the EquipmentMaintenanceReplacementSpareParts EntitySet.
        /// </summary>
        public void AddToEquipmentMaintenanceReplacementSpareParts(EquipmentMaintenanceReplacementSparePart equipmentMaintenanceReplacementSparePart)
        {
            base.AddObject("EquipmentMaintenanceReplacementSpareParts", equipmentMaintenanceReplacementSparePart);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the EquipmentTypes EntitySet.
        /// </summary>
        public void AddToEquipmentTypes(EquipmentType equipmentType)
        {
            base.AddObject("EquipmentTypes", equipmentType);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the FaultCategories EntitySet.
        /// </summary>
        public void AddToFaultCategories(FaultCategory faultCategory)
        {
            base.AddObject("FaultCategories", faultCategory);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the InstallationLocationInfos EntitySet.
        /// </summary>
        public void AddToInstallationLocationInfos(InstallationLocationInfo installationLocationInfo)
        {
            base.AddObject("InstallationLocationInfos", installationLocationInfo);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the MaintenanceLevels EntitySet.
        /// </summary>
        public void AddToMaintenanceLevels(MaintenanceLevel maintenanceLevel)
        {
            base.AddObject("MaintenanceLevels", maintenanceLevel);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the PartnerInfos EntitySet.
        /// </summary>
        public void AddToPartnerInfos(PartnerInfo partnerInfo)
        {
            base.AddObject("PartnerInfos", partnerInfo);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the SparePartInfos EntitySet.
        /// </summary>
        public void AddToSparePartInfos(SparePartInfo sparePartInfo)
        {
            base.AddObject("SparePartInfos", sparePartInfo);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the SparePartInventoryChangeHistories EntitySet.
        /// </summary>
        public void AddToSparePartInventoryChangeHistories(SparePartInventoryChangeHistory sparePartInventoryChangeHistory)
        {
            base.AddObject("SparePartInventoryChangeHistories", sparePartInventoryChangeHistory);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the SparePartInventoryChangeReasons EntitySet.
        /// </summary>
        public void AddToSparePartInventoryChangeReasons(SparePartInventoryChangeReason sparePartInventoryChangeReason)
        {
            base.AddObject("SparePartInventoryChangeReasons", sparePartInventoryChangeReason);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the SparePartInventoryChecks EntitySet.
        /// </summary>
        public void AddToSparePartInventoryChecks(SparePartInventoryCheck sparePartInventoryCheck)
        {
            base.AddObject("SparePartInventoryChecks", sparePartInventoryCheck);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the SparePartInventoryCheckDetails EntitySet.
        /// </summary>
        public void AddToSparePartInventoryCheckDetails(SparePartInventoryCheckDetail sparePartInventoryCheckDetail)
        {
            base.AddObject("SparePartInventoryCheckDetails", sparePartInventoryCheckDetail);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the SparePartTypes EntitySet.
        /// </summary>
        public void AddToSparePartTypes(SparePartType sparePartType)
        {
            base.AddObject("SparePartTypes", sparePartType);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the UnitOfMeasurements EntitySet.
        /// </summary>
        public void AddToUnitOfMeasurements(UnitOfMeasurement unitOfMeasurement)
        {
            base.AddObject("UnitOfMeasurements", unitOfMeasurement);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the UnitTypes EntitySet.
        /// </summary>
        public void AddToUnitTypes(UnitType unitType)
        {
            base.AddObject("UnitTypes", unitType);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the UserInfoViews EntitySet.
        /// </summary>
        public void AddToUserInfoViews(UserInfoView userInfoView)
        {
            base.AddObject("UserInfoViews", userInfoView);
        }

        #endregion
    }

    #endregion
}

namespace ImModel
{

    /// <summary>
    /// 事故级别
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "AccidentLevel")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class AccidentLevel : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new AccidentLevel object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static AccidentLevel CreateAccidentLevel(int id)
        {
            AccidentLevel accidentLevel = new AccidentLevel();
            accidentLevel.Id = id;
            return accidentLevel;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 事故级别名称
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string AccidentLevelName
        {
            get
            {
                string value = _AccidentLevelName;
                OnGetAccidentLevelName(ref value);
                return value;
            }
            set
            {
                if (_AccidentLevelName != value)
                {
                    OnAccidentLevelNameChanging(ref value);
                    ReportPropertyChanging("AccidentLevelName");
                    _AccidentLevelName = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("AccidentLevelName");
                    OnAccidentLevelNameChanged();
                }
            }
        }
        private string _AccidentLevelName;
        partial void OnGetAccidentLevelName(ref string value);
        partial void OnAccidentLevelNameChanging(ref string value);
        partial void OnAccidentLevelNameChanged();

        /// <summary>
        /// 备注
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Remarks
        {
            get
            {
                string value = _Remarks;
                OnGetRemarks(ref value);
                return value;
            }
            set
            {
                if (_Remarks != value)
                {
                    OnRemarksChanging(ref value);
                    ReportPropertyChanging("Remarks");
                    _Remarks = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Remarks");
                    OnRemarksChanged();
                }
            }
        }
        private string _Remarks;
        partial void OnGetRemarks(ref string value);
        partial void OnRemarksChanging(ref string value);
        partial void OnRemarksChanged();

        #endregion
    }

    /// <summary>
    /// 事故性质
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "AccidentNature")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class AccidentNature : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new AccidentNature object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static AccidentNature CreateAccidentNature(int id)
        {
            AccidentNature accidentNature = new AccidentNature();
            accidentNature.Id = id;
            return accidentNature;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 事故性质名称
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string AccidentNatureName
        {
            get
            {
                string value = _AccidentNatureName;
                OnGetAccidentNatureName(ref value);
                return value;
            }
            set
            {
                if (_AccidentNatureName != value)
                {
                    OnAccidentNatureNameChanging(ref value);
                    ReportPropertyChanging("AccidentNatureName");
                    _AccidentNatureName = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("AccidentNatureName");
                    OnAccidentNatureNameChanged();
                }
            }
        }
        private string _AccidentNatureName;
        partial void OnGetAccidentNatureName(ref string value);
        partial void OnAccidentNatureNameChanging(ref string value);
        partial void OnAccidentNatureNameChanged();

        /// <summary>
        /// 备注
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Remarks
        {
            get
            {
                string value = _Remarks;
                OnGetRemarks(ref value);
                return value;
            }
            set
            {
                if (_Remarks != value)
                {
                    OnRemarksChanging(ref value);
                    ReportPropertyChanging("Remarks");
                    _Remarks = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Remarks");
                    OnRemarksChanged();
                }
            }
        }
        private string _Remarks;
        partial void OnGetRemarks(ref string value);
        partial void OnRemarksChanging(ref string value);
        partial void OnRemarksChanged();

        #endregion
    }

    /// <summary>
    /// 事故报告
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "AccidentReport")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class AccidentReport : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new AccidentReport object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static AccidentReport CreateAccidentReport(int id)
        {
            AccidentReport accidentReport = new AccidentReport();
            accidentReport.Id = id;
            return accidentReport;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 设备编号
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string DeviceNumber
        {
            get
            {
                string value = _DeviceNumber;
                OnGetDeviceNumber(ref value);
                return value;
            }
            set
            {
                if (_DeviceNumber != value)
                {
                    OnDeviceNumberChanging(ref value);
                    ReportPropertyChanging("DeviceNumber");
                    _DeviceNumber = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("DeviceNumber");
                    OnDeviceNumberChanged();
                }
            }
        }
        private string _DeviceNumber;
        partial void OnGetDeviceNumber(ref string value);
        partial void OnDeviceNumberChanging(ref string value);
        partial void OnDeviceNumberChanged();

        /// <summary>
        /// 事故日期
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string AccidentDate
        {
            get
            {
                string value = _AccidentDate;
                OnGetAccidentDate(ref value);
                return value;
            }
            set
            {
                if (_AccidentDate != value)
                {
                    OnAccidentDateChanging(ref value);
                    ReportPropertyChanging("AccidentDate");
                    _AccidentDate = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("AccidentDate");
                    OnAccidentDateChanged();
                }
            }
        }
        private string _AccidentDate;
        partial void OnGetAccidentDate(ref string value);
        partial void OnAccidentDateChanging(ref string value);
        partial void OnAccidentDateChanged();

        /// <summary>
        /// 事故部门ID
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? AccidentDepartmentId
        {
            get
            {
                int? value = _AccidentDepartmentId;
                OnGetAccidentDepartmentId(ref value);
                return value;
            }
            set
            {
                if (_AccidentDepartmentId != value)
                {
                    OnAccidentDepartmentIdChanging(ref value);
                    ReportPropertyChanging("AccidentDepartmentId");
                    _AccidentDepartmentId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AccidentDepartmentId");
                    OnAccidentDepartmentIdChanged();
                }
            }
        }
        private int? _AccidentDepartmentId;
        partial void OnGetAccidentDepartmentId(ref int? value);
        partial void OnAccidentDepartmentIdChanging(ref int? value);
        partial void OnAccidentDepartmentIdChanged();

        /// <summary>
        /// 事故级别ID
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? AccidentLevelId
        {
            get
            {
                int? value = _AccidentLevelId;
                OnGetAccidentLevelId(ref value);
                return value;
            }
            set
            {
                if (_AccidentLevelId != value)
                {
                    OnAccidentLevelIdChanging(ref value);
                    ReportPropertyChanging("AccidentLevelId");
                    _AccidentLevelId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AccidentLevelId");
                    OnAccidentLevelIdChanged();
                }
            }
        }
        private int? _AccidentLevelId;
        partial void OnGetAccidentLevelId(ref int? value);
        partial void OnAccidentLevelIdChanging(ref int? value);
        partial void OnAccidentLevelIdChanged();

        /// <summary>
        /// 事故性质
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? AccidentNature
        {
            get
            {
                int? value = _AccidentNature;
                OnGetAccidentNature(ref value);
                return value;
            }
            set
            {
                if (_AccidentNature != value)
                {
                    OnAccidentNatureChanging(ref value);
                    ReportPropertyChanging("AccidentNature");
                    _AccidentNature = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AccidentNature");
                    OnAccidentNatureChanged();
                }
            }
        }
        private int? _AccidentNature;
        partial void OnGetAccidentNature(ref int? value);
        partial void OnAccidentNatureChanging(ref int? value);
        partial void OnAccidentNatureChanged();

        /// <summary>
        /// 经济损失
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string EconomicLoss
        {
            get
            {
                string value = _EconomicLoss;
                OnGetEconomicLoss(ref value);
                return value;
            }
            set
            {
                if (_EconomicLoss != value)
                {
                    OnEconomicLossChanging(ref value);
                    ReportPropertyChanging("EconomicLoss");
                    _EconomicLoss = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("EconomicLoss");
                    OnEconomicLossChanged();
                }
            }
        }
        private string _EconomicLoss;
        partial void OnGetEconomicLoss(ref string value);
        partial void OnEconomicLossChanging(ref string value);
        partial void OnEconomicLossChanged();

        /// <summary>
        /// 事故经过
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string AccidentProcess
        {
            get
            {
                string value = _AccidentProcess;
                OnGetAccidentProcess(ref value);
                return value;
            }
            set
            {
                if (_AccidentProcess != value)
                {
                    OnAccidentProcessChanging(ref value);
                    ReportPropertyChanging("AccidentProcess");
                    _AccidentProcess = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("AccidentProcess");
                    OnAccidentProcessChanged();
                }
            }
        }
        private string _AccidentProcess;
        partial void OnGetAccidentProcess(ref string value);
        partial void OnAccidentProcessChanging(ref string value);
        partial void OnAccidentProcessChanged();

        /// <summary>
        /// 事故调查
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string AccidentInvestigation
        {
            get
            {
                string value = _AccidentInvestigation;
                OnGetAccidentInvestigation(ref value);
                return value;
            }
            set
            {
                if (_AccidentInvestigation != value)
                {
                    OnAccidentInvestigationChanging(ref value);
                    ReportPropertyChanging("AccidentInvestigation");
                    _AccidentInvestigation = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("AccidentInvestigation");
                    OnAccidentInvestigationChanged();
                }
            }
        }
        private string _AccidentInvestigation;
        partial void OnGetAccidentInvestigation(ref string value);
        partial void OnAccidentInvestigationChanging(ref string value);
        partial void OnAccidentInvestigationChanged();

        /// <summary>
        /// 防范总结
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string PreventionSummary
        {
            get
            {
                string value = _PreventionSummary;
                OnGetPreventionSummary(ref value);
                return value;
            }
            set
            {
                if (_PreventionSummary != value)
                {
                    OnPreventionSummaryChanging(ref value);
                    ReportPropertyChanging("PreventionSummary");
                    _PreventionSummary = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("PreventionSummary");
                    OnPreventionSummaryChanged();
                }
            }
        }
        private string _PreventionSummary;
        partial void OnGetPreventionSummary(ref string value);
        partial void OnPreventionSummaryChanging(ref string value);
        partial void OnPreventionSummaryChanged();

        #endregion
    }

    /// <summary>
    /// 部门�?
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "DepartmentTable")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class DepartmentTable : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new DepartmentTable object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static DepartmentTable CreateDepartmentTable(int id)
        {
            DepartmentTable departmentTable = new DepartmentTable();
            departmentTable.Id = id;
            return departmentTable;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 部门名称
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string DepartmentName
        {
            get
            {
                string value = _DepartmentName;
                OnGetDepartmentName(ref value);
                return value;
            }
            set
            {
                if (_DepartmentName != value)
                {
                    OnDepartmentNameChanging(ref value);
                    ReportPropertyChanging("DepartmentName");
                    _DepartmentName = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("DepartmentName");
                    OnDepartmentNameChanged();
                }
            }
        }
        private string _DepartmentName;
        partial void OnGetDepartmentName(ref string value);
        partial void OnDepartmentNameChanging(ref string value);
        partial void OnDepartmentNameChanged();

        /// <summary>
        /// 备注
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Remarks
        {
            get
            {
                string value = _Remarks;
                OnGetRemarks(ref value);
                return value;
            }
            set
            {
                if (_Remarks != value)
                {
                    OnRemarksChanging(ref value);
                    ReportPropertyChanging("Remarks");
                    _Remarks = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Remarks");
                    OnRemarksChanged();
                }
            }
        }
        private string _Remarks;
        partial void OnGetRemarks(ref string value);
        partial void OnRemarksChanging(ref string value);
        partial void OnRemarksChanged();

        #endregion
    }

    /// <summary>
    /// 文档管理
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "DocumentManagement")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class DocumentManagement : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new DocumentManagement object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static DocumentManagement CreateDocumentManagement(int id)
        {
            DocumentManagement documentManagement = new DocumentManagement();
            documentManagement.Id = id;
            return documentManagement;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 设备编号
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string DeviceNumber
        {
            get
            {
                string value = _DeviceNumber;
                OnGetDeviceNumber(ref value);
                return value;
            }
            set
            {
                if (_DeviceNumber != value)
                {
                    OnDeviceNumberChanging(ref value);
                    ReportPropertyChanging("DeviceNumber");
                    _DeviceNumber = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("DeviceNumber");
                    OnDeviceNumberChanged();
                }
            }
        }
        private string _DeviceNumber;
        partial void OnGetDeviceNumber(ref string value);
        partial void OnDeviceNumberChanging(ref string value);
        partial void OnDeviceNumberChanged();

        /// <summary>
        /// 文档名称
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string DocumentName
        {
            get
            {
                string value = _DocumentName;
                OnGetDocumentName(ref value);
                return value;
            }
            set
            {
                if (_DocumentName != value)
                {
                    OnDocumentNameChanging(ref value);
                    ReportPropertyChanging("DocumentName");
                    _DocumentName = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("DocumentName");
                    OnDocumentNameChanged();
                }
            }
        }
        private string _DocumentName;
        partial void OnGetDocumentName(ref string value);
        partial void OnDocumentNameChanging(ref string value);
        partial void OnDocumentNameChanged();

        /// <summary>
        /// 文档类型
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string DocumentType
        {
            get
            {
                string value = _DocumentType;
                OnGetDocumentType(ref value);
                return value;
            }
            set
            {
                if (_DocumentType != value)
                {
                    OnDocumentTypeChanging(ref value);
                    ReportPropertyChanging("DocumentType");
                    _DocumentType = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("DocumentType");
                    OnDocumentTypeChanged();
                }
            }
        }
        private string _DocumentType;
        partial void OnGetDocumentType(ref string value);
        partial void OnDocumentTypeChanging(ref string value);
        partial void OnDocumentTypeChanged();

        /// <summary>
        /// 上传日期
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string UploadDate
        {
            get
            {
                string value = _UploadDate;
                OnGetUploadDate(ref value);
                return value;
            }
            set
            {
                if (_UploadDate != value)
                {
                    OnUploadDateChanging(ref value);
                    ReportPropertyChanging("UploadDate");
                    _UploadDate = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("UploadDate");
                    OnUploadDateChanged();
                }
            }
        }
        private string _UploadDate;
        partial void OnGetUploadDate(ref string value);
        partial void OnUploadDateChanging(ref string value);
        partial void OnUploadDateChanged();

        /// <summary>
        /// 文档附件
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string DocumentAttachment
        {
            get
            {
                string value = _DocumentAttachment;
                OnGetDocumentAttachment(ref value);
                return value;
            }
            set
            {
                if (_DocumentAttachment != value)
                {
                    OnDocumentAttachmentChanging(ref value);
                    ReportPropertyChanging("DocumentAttachment");
                    _DocumentAttachment = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("DocumentAttachment");
                    OnDocumentAttachmentChanged();
                }
            }
        }
        private string _DocumentAttachment;
        partial void OnGetDocumentAttachment(ref string value);
        partial void OnDocumentAttachmentChanging(ref string value);
        partial void OnDocumentAttachmentChanged();

        /// <summary>
        /// 备注
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Remarks
        {
            get
            {
                string value = _Remarks;
                OnGetRemarks(ref value);
                return value;
            }
            set
            {
                if (_Remarks != value)
                {
                    OnRemarksChanging(ref value);
                    ReportPropertyChanging("Remarks");
                    _Remarks = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Remarks");
                    OnRemarksChanged();
                }
            }
        }
        private string _Remarks;
        partial void OnGetRemarks(ref string value);
        partial void OnRemarksChanging(ref string value);
        partial void OnRemarksChanged();

        #endregion
    }

    /// <summary>
    /// 设备信息�?
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "EquipmentInfo")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class EquipmentInfo : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new EquipmentInfo object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="deviceNumber">Initial value of DeviceNumber.</param>
        /// <param name="deviceName">Initial value of DeviceName.</param>
        /// <param name="quantity">Initial value of Quantity.</param>
        /// <param name="purchaseTime">Initial value of PurchaseTime.</param>
        /// <param name="assetOriginalValue">Initial value of AssetOriginalValue.</param>
        /// <param name="residualValueRate">Initial value of ResidualValueRate.</param>
        /// <param name="depreciationMonth">Initial value of DepreciationMonth.</param>
        public static EquipmentInfo CreateEquipmentInfo(int id, string deviceNumber, string deviceName, int quantity, string purchaseTime, int assetOriginalValue, float residualValueRate, int depreciationMonth)
        {
            EquipmentInfo equipmentInfo = new EquipmentInfo();
            equipmentInfo.Id = id;
            equipmentInfo.DeviceNumber = deviceNumber;
            equipmentInfo.DeviceName = deviceName;
            equipmentInfo.Quantity = quantity;
            equipmentInfo.PurchaseTime = purchaseTime;
            equipmentInfo.AssetOriginalValue = assetOriginalValue;
            equipmentInfo.ResidualValueRate = residualValueRate;
            equipmentInfo.DepreciationMonth = depreciationMonth;
            return equipmentInfo;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 设备编号
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable = false)]
        [DataMemberAttribute()]
        public virtual string DeviceNumber
        {
            get
            {
                string value = _DeviceNumber;
                OnGetDeviceNumber(ref value);
                return value;
            }
            set
            {
                if (_DeviceNumber != value)
                {
                    OnDeviceNumberChanging(ref value);
                    ReportPropertyChanging("DeviceNumber");
                    _DeviceNumber = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("DeviceNumber");
                    OnDeviceNumberChanged();
                }
            }
        }
        private string _DeviceNumber;
        partial void OnGetDeviceNumber(ref string value);
        partial void OnDeviceNumberChanging(ref string value);
        partial void OnDeviceNumberChanged();

        /// <summary>
        /// 设备名称
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable = false)]
        [DataMemberAttribute()]
        public virtual string DeviceName
        {
            get
            {
                string value = _DeviceName;
                OnGetDeviceName(ref value);
                return value;
            }
            set
            {
                if (_DeviceName != value)
                {
                    OnDeviceNameChanging(ref value);
                    ReportPropertyChanging("DeviceName");
                    _DeviceName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("DeviceName");
                    OnDeviceNameChanged();
                }
            }
        }
        private string _DeviceName;
        partial void OnGetDeviceName(ref string value);
        partial void OnDeviceNameChanging(ref string value);
        partial void OnDeviceNameChanged();

        /// <summary>
        /// 数量
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Quantity
        {
            get
            {
                int value = _Quantity;
                OnGetQuantity(ref value);
                return value;
            }
            set
            {
                if (_Quantity != value)
                {
                    OnQuantityChanging(ref value);
                    ReportPropertyChanging("Quantity");
                    _Quantity = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Quantity");
                    OnQuantityChanged();
                }
            }
        }
        private int _Quantity;
        partial void OnGetQuantity(ref int value);
        partial void OnQuantityChanging(ref int value);
        partial void OnQuantityChanged();

        /// <summary>
        /// 规格型号
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string SpecificationModel
        {
            get
            {
                string value = _SpecificationModel;
                OnGetSpecificationModel(ref value);
                return value;
            }
            set
            {
                if (_SpecificationModel != value)
                {
                    OnSpecificationModelChanging(ref value);
                    ReportPropertyChanging("SpecificationModel");
                    _SpecificationModel = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("SpecificationModel");
                    OnSpecificationModelChanged();
                }
            }
        }
        private string _SpecificationModel;
        partial void OnGetSpecificationModel(ref string value);
        partial void OnSpecificationModelChanging(ref string value);
        partial void OnSpecificationModelChanged();

        /// <summary>
        /// 设备类别ID
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? DeviceCategoryId
        {
            get
            {
                int? value = _DeviceCategoryId;
                OnGetDeviceCategoryId(ref value);
                return value;
            }
            set
            {
                if (_DeviceCategoryId != value)
                {
                    OnDeviceCategoryIdChanging(ref value);
                    ReportPropertyChanging("DeviceCategoryId");
                    _DeviceCategoryId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DeviceCategoryId");
                    OnDeviceCategoryIdChanged();
                }
            }
        }
        private int? _DeviceCategoryId;
        partial void OnGetDeviceCategoryId(ref int? value);
        partial void OnDeviceCategoryIdChanging(ref int? value);
        partial void OnDeviceCategoryIdChanged();

        /// <summary>
        /// 设备图片
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string DeviceImage
        {
            get
            {
                string value = _DeviceImage;
                OnGetDeviceImage(ref value);
                return value;
            }
            set
            {
                if (_DeviceImage != value)
                {
                    OnDeviceImageChanging(ref value);
                    ReportPropertyChanging("DeviceImage");
                    _DeviceImage = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("DeviceImage");
                    OnDeviceImageChanged();
                }
            }
        }
        private string _DeviceImage;
        partial void OnGetDeviceImage(ref string value);
        partial void OnDeviceImageChanging(ref string value);
        partial void OnDeviceImageChanged();

        /// <summary>
        /// 生产厂商
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Manufacturer
        {
            get
            {
                string value = _Manufacturer;
                OnGetManufacturer(ref value);
                return value;
            }
            set
            {
                if (_Manufacturer != value)
                {
                    OnManufacturerChanging(ref value);
                    ReportPropertyChanging("Manufacturer");
                    _Manufacturer = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Manufacturer");
                    OnManufacturerChanged();
                }
            }
        }
        private string _Manufacturer;
        partial void OnGetManufacturer(ref string value);
        partial void OnManufacturerChanging(ref string value);
        partial void OnManufacturerChanged();

        /// <summary>
        /// 总功�?
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string TotalPower
        {
            get
            {
                string value = _TotalPower;
                OnGetTotalPower(ref value);
                return value;
            }
            set
            {
                if (_TotalPower != value)
                {
                    OnTotalPowerChanging(ref value);
                    ReportPropertyChanging("TotalPower");
                    _TotalPower = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("TotalPower");
                    OnTotalPowerChanged();
                }
            }
        }
        private string _TotalPower;
        partial void OnGetTotalPower(ref string value);
        partial void OnTotalPowerChanging(ref string value);
        partial void OnTotalPowerChanged();

        /// <summary>
        /// 经销�?
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Distributor
        {
            get
            {
                string value = _Distributor;
                OnGetDistributor(ref value);
                return value;
            }
            set
            {
                if (_Distributor != value)
                {
                    OnDistributorChanging(ref value);
                    ReportPropertyChanging("Distributor");
                    _Distributor = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Distributor");
                    OnDistributorChanged();
                }
            }
        }
        private string _Distributor;
        partial void OnGetDistributor(ref string value);
        partial void OnDistributorChanging(ref string value);
        partial void OnDistributorChanged();

        /// <summary>
        /// 设备标识
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string DeviceIdentifier
        {
            get
            {
                string value = _DeviceIdentifier;
                OnGetDeviceIdentifier(ref value);
                return value;
            }
            set
            {
                if (_DeviceIdentifier != value)
                {
                    OnDeviceIdentifierChanging(ref value);
                    ReportPropertyChanging("DeviceIdentifier");
                    _DeviceIdentifier = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("DeviceIdentifier");
                    OnDeviceIdentifierChanged();
                }
            }
        }
        private string _DeviceIdentifier;
        partial void OnGetDeviceIdentifier(ref string value);
        partial void OnDeviceIdentifierChanging(ref string value);
        partial void OnDeviceIdentifierChanged();

        /// <summary>
        /// 购置时间
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable = false)]
        [DataMemberAttribute()]
        public virtual string PurchaseTime
        {
            get
            {
                string value = _PurchaseTime;
                OnGetPurchaseTime(ref value);
                return value;
            }
            set
            {
                if (_PurchaseTime != value)
                {
                    OnPurchaseTimeChanging(ref value);
                    ReportPropertyChanging("PurchaseTime");
                    _PurchaseTime = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("PurchaseTime");
                    OnPurchaseTimeChanged();
                }
            }
        }
        private string _PurchaseTime;
        partial void OnGetPurchaseTime(ref string value);
        partial void OnPurchaseTimeChanging(ref string value);
        partial void OnPurchaseTimeChanged();

        /// <summary>
        /// 资产原�?
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int AssetOriginalValue
        {
            get
            {
                int value = _AssetOriginalValue;
                OnGetAssetOriginalValue(ref value);
                return value;
            }
            set
            {
                if (_AssetOriginalValue != value)
                {
                    OnAssetOriginalValueChanging(ref value);
                    ReportPropertyChanging("AssetOriginalValue");
                    _AssetOriginalValue = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AssetOriginalValue");
                    OnAssetOriginalValueChanged();
                }
            }
        }
        private int _AssetOriginalValue;
        partial void OnGetAssetOriginalValue(ref int value);
        partial void OnAssetOriginalValueChanging(ref int value);
        partial void OnAssetOriginalValueChanged();

        /// <summary>
        /// 资产负责�?
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string AssetManager
        {
            get
            {
                string value = _AssetManager;
                OnGetAssetManager(ref value);
                return value;
            }
            set
            {
                if (_AssetManager != value)
                {
                    OnAssetManagerChanging(ref value);
                    ReportPropertyChanging("AssetManager");
                    _AssetManager = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("AssetManager");
                    OnAssetManagerChanged();
                }
            }
        }
        private string _AssetManager;
        partial void OnGetAssetManager(ref string value);
        partial void OnAssetManagerChanging(ref string value);
        partial void OnAssetManagerChanged();

        /// <summary>
        /// 残值率
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable = false)]
        [DataMemberAttribute()]
        public virtual float ResidualValueRate
        {
            get
            {
                float value = _ResidualValueRate;
                OnGetResidualValueRate(ref value);
                return value;
            }
            set
            {
                if (_ResidualValueRate != value)
                {
                    OnResidualValueRateChanging(ref value);
                    ReportPropertyChanging("ResidualValueRate");
                    _ResidualValueRate = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ResidualValueRate");
                    OnResidualValueRateChanged();
                }
            }
        }
        private float _ResidualValueRate = 0.05f;
        partial void OnGetResidualValueRate(ref float value);
        partial void OnResidualValueRateChanging(ref float value);
        partial void OnResidualValueRateChanged();

        /// <summary>
        /// 折旧�?
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int DepreciationMonth
        {
            get
            {
                int value = _DepreciationMonth;
                OnGetDepreciationMonth(ref value);
                return value;
            }
            set
            {
                if (_DepreciationMonth != value)
                {
                    OnDepreciationMonthChanging(ref value);
                    ReportPropertyChanging("DepreciationMonth");
                    _DepreciationMonth = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DepreciationMonth");
                    OnDepreciationMonthChanged();
                }
            }
        }
        private int _DepreciationMonth = 20;
        partial void OnGetDepreciationMonth(ref int value);
        partial void OnDepreciationMonthChanging(ref int value);
        partial void OnDepreciationMonthChanged();

        /// <summary>
        /// 设备状�?
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string DeviceStatus
        {
            get
            {
                string value = _DeviceStatus;
                OnGetDeviceStatus(ref value);
                return value;
            }
            set
            {
                if (_DeviceStatus != value)
                {
                    OnDeviceStatusChanging(ref value);
                    ReportPropertyChanging("DeviceStatus");
                    _DeviceStatus = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("DeviceStatus");
                    OnDeviceStatusChanged();
                }
            }
        }
        private string _DeviceStatus = @"设备正常";
        partial void OnGetDeviceStatus(ref string value);
        partial void OnDeviceStatusChanging(ref string value);
        partial void OnDeviceStatusChanged();

        /// <summary>
        /// 使用部门ID
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? UsingDepartmentId
        {
            get
            {
                int? value = _UsingDepartmentId;
                OnGetUsingDepartmentId(ref value);
                return value;
            }
            set
            {
                if (_UsingDepartmentId != value)
                {
                    OnUsingDepartmentIdChanging(ref value);
                    ReportPropertyChanging("UsingDepartmentId");
                    _UsingDepartmentId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UsingDepartmentId");
                    OnUsingDepartmentIdChanged();
                }
            }
        }
        private int? _UsingDepartmentId;
        partial void OnGetUsingDepartmentId(ref int? value);
        partial void OnUsingDepartmentIdChanging(ref int? value);
        partial void OnUsingDepartmentIdChanged();

        /// <summary>
        /// 操作人员
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Operator
        {
            get
            {
                string value = _Operator;
                OnGetOperator(ref value);
                return value;
            }
            set
            {
                if (_Operator != value)
                {
                    OnOperatorChanging(ref value);
                    ReportPropertyChanging("Operator");
                    _Operator = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Operator");
                    OnOperatorChanged();
                }
            }
        }
        private string _Operator;
        partial void OnGetOperator(ref string value);
        partial void OnOperatorChanging(ref string value);
        partial void OnOperatorChanged();

        /// <summary>
        /// 安装地点
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? InstallationLocation
        {
            get
            {
                int? value = _InstallationLocation;
                OnGetInstallationLocation(ref value);
                return value;
            }
            set
            {
                if (_InstallationLocation != value)
                {
                    OnInstallationLocationChanging(ref value);
                    ReportPropertyChanging("InstallationLocation");
                    _InstallationLocation = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("InstallationLocation");
                    OnInstallationLocationChanged();
                }
            }
        }
        private int? _InstallationLocation;
        partial void OnGetInstallationLocation(ref int? value);
        partial void OnInstallationLocationChanging(ref int? value);
        partial void OnInstallationLocationChanged();

        /// <summary>
        /// 备注
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Remarks
        {
            get
            {
                string value = _Remarks;
                OnGetRemarks(ref value);
                return value;
            }
            set
            {
                if (_Remarks != value)
                {
                    OnRemarksChanging(ref value);
                    ReportPropertyChanging("Remarks");
                    _Remarks = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Remarks");
                    OnRemarksChanged();
                }
            }
        }
        private string _Remarks;
        partial void OnGetRemarks(ref string value);
        partial void OnRemarksChanging(ref string value);
        partial void OnRemarksChanged();

        /// <summary>
        /// 累计折旧月份
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string AccumulatedDepreciationMonths
        {
            get
            {
                string value = _AccumulatedDepreciationMonths;
                OnGetAccumulatedDepreciationMonths(ref value);
                return value;
            }
            set
            {
                if (_AccumulatedDepreciationMonths != value)
                {
                    OnAccumulatedDepreciationMonthsChanging(ref value);
                    ReportPropertyChanging("AccumulatedDepreciationMonths");
                    _AccumulatedDepreciationMonths = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("AccumulatedDepreciationMonths");
                    OnAccumulatedDepreciationMonthsChanged();
                }
            }
        }
        private string _AccumulatedDepreciationMonths;
        partial void OnGetAccumulatedDepreciationMonths(ref string value);
        partial void OnAccumulatedDepreciationMonthsChanging(ref string value);
        partial void OnAccumulatedDepreciationMonthsChanged();

        /// <summary>
        /// 月折旧额
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? MonthlyDepreciationAmount
        {
            get
            {
                int? value = _MonthlyDepreciationAmount;
                OnGetMonthlyDepreciationAmount(ref value);
                return value;
            }
            set
            {
                if (_MonthlyDepreciationAmount != value)
                {
                    OnMonthlyDepreciationAmountChanging(ref value);
                    ReportPropertyChanging("MonthlyDepreciationAmount");
                    _MonthlyDepreciationAmount = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MonthlyDepreciationAmount");
                    OnMonthlyDepreciationAmountChanged();
                }
            }
        }
        private int? _MonthlyDepreciationAmount;
        partial void OnGetMonthlyDepreciationAmount(ref int? value);
        partial void OnMonthlyDepreciationAmountChanging(ref int? value);
        partial void OnMonthlyDepreciationAmountChanged();

        /// <summary>
        /// 净�?
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string NetValue
        {
            get
            {
                string value = _NetValue;
                OnGetNetValue(ref value);
                return value;
            }
            set
            {
                if (_NetValue != value)
                {
                    OnNetValueChanging(ref value);
                    ReportPropertyChanging("NetValue");
                    _NetValue = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("NetValue");
                    OnNetValueChanged();
                }
            }
        }
        private string _NetValue;
        partial void OnGetNetValue(ref string value);
        partial void OnNetValueChanging(ref string value);
        partial void OnNetValueChanged();

        /// <summary>
        /// 月折旧率
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string MonthlyDepreciationRate
        {
            get
            {
                string value = _MonthlyDepreciationRate;
                OnGetMonthlyDepreciationRate(ref value);
                return value;
            }
            set
            {
                if (_MonthlyDepreciationRate != value)
                {
                    OnMonthlyDepreciationRateChanging(ref value);
                    ReportPropertyChanging("MonthlyDepreciationRate");
                    _MonthlyDepreciationRate = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("MonthlyDepreciationRate");
                    OnMonthlyDepreciationRateChanged();
                }
            }
        }
        private string _MonthlyDepreciationRate;
        partial void OnGetMonthlyDepreciationRate(ref string value);
        partial void OnMonthlyDepreciationRateChanging(ref string value);
        partial void OnMonthlyDepreciationRateChanged();

        #endregion
    }

    /// <summary>
    /// 设备维修记录�?
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "EquipmentMaintenanceRecord")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class EquipmentMaintenanceRecord : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new EquipmentMaintenanceRecord object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="maintenanceOrderNumber">Initial value of MaintenanceOrderNumber.</param>
        /// <param name="deviceNumber">Initial value of DeviceNumber.</param>
        public static EquipmentMaintenanceRecord CreateEquipmentMaintenanceRecord(int id, string maintenanceOrderNumber, string deviceNumber)
        {
            EquipmentMaintenanceRecord equipmentMaintenanceRecord = new EquipmentMaintenanceRecord();
            equipmentMaintenanceRecord.Id = id;
            equipmentMaintenanceRecord.MaintenanceOrderNumber = maintenanceOrderNumber;
            equipmentMaintenanceRecord.DeviceNumber = deviceNumber;
            return equipmentMaintenanceRecord;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 维修单号
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable = false)]
        [DataMemberAttribute()]
        public virtual string MaintenanceOrderNumber
        {
            get
            {
                string value = _MaintenanceOrderNumber;
                OnGetMaintenanceOrderNumber(ref value);
                return value;
            }
            set
            {
                if (_MaintenanceOrderNumber != value)
                {
                    OnMaintenanceOrderNumberChanging(ref value);
                    ReportPropertyChanging("MaintenanceOrderNumber");
                    _MaintenanceOrderNumber = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("MaintenanceOrderNumber");
                    OnMaintenanceOrderNumberChanged();
                }
            }
        }
        private string _MaintenanceOrderNumber;
        partial void OnGetMaintenanceOrderNumber(ref string value);
        partial void OnMaintenanceOrderNumberChanging(ref string value);
        partial void OnMaintenanceOrderNumberChanged();

        /// <summary>
        /// 设备编号
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable = false)]
        [DataMemberAttribute()]
        public virtual string DeviceNumber
        {
            get
            {
                string value = _DeviceNumber;
                OnGetDeviceNumber(ref value);
                return value;
            }
            set
            {
                if (_DeviceNumber != value)
                {
                    OnDeviceNumberChanging(ref value);
                    ReportPropertyChanging("DeviceNumber");
                    _DeviceNumber = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("DeviceNumber");
                    OnDeviceNumberChanged();
                }
            }
        }
        private string _DeviceNumber;
        partial void OnGetDeviceNumber(ref string value);
        partial void OnDeviceNumberChanging(ref string value);
        partial void OnDeviceNumberChanged();

        /// <summary>
        /// 维修是否完成
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? MaintenanceCompleted
        {
            get
            {
                int? value = _MaintenanceCompleted;
                OnGetMaintenanceCompleted(ref value);
                return value;
            }
            set
            {
                if (_MaintenanceCompleted != value)
                {
                    OnMaintenanceCompletedChanging(ref value);
                    ReportPropertyChanging("MaintenanceCompleted");
                    _MaintenanceCompleted = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MaintenanceCompleted");
                    OnMaintenanceCompletedChanged();
                }
            }
        }
        private int? _MaintenanceCompleted = 0;
        partial void OnGetMaintenanceCompleted(ref int? value);
        partial void OnMaintenanceCompletedChanging(ref int? value);
        partial void OnMaintenanceCompletedChanged();

        /// <summary>
        /// 维修申请�?
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string MaintenanceApplicant
        {
            get
            {
                string value = _MaintenanceApplicant;
                OnGetMaintenanceApplicant(ref value);
                return value;
            }
            set
            {
                if (_MaintenanceApplicant != value)
                {
                    OnMaintenanceApplicantChanging(ref value);
                    ReportPropertyChanging("MaintenanceApplicant");
                    _MaintenanceApplicant = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("MaintenanceApplicant");
                    OnMaintenanceApplicantChanged();
                }
            }
        }
        private string _MaintenanceApplicant;
        partial void OnGetMaintenanceApplicant(ref string value);
        partial void OnMaintenanceApplicantChanging(ref string value);
        partial void OnMaintenanceApplicantChanged();

        /// <summary>
        /// 送修时间
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string TimeOfRepair
        {
            get
            {
                string value = _TimeOfRepair;
                OnGetTimeOfRepair(ref value);
                return value;
            }
            set
            {
                if (_TimeOfRepair != value)
                {
                    OnTimeOfRepairChanging(ref value);
                    ReportPropertyChanging("TimeOfRepair");
                    _TimeOfRepair = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("TimeOfRepair");
                    OnTimeOfRepairChanged();
                }
            }
        }
        private string _TimeOfRepair;
        partial void OnGetTimeOfRepair(ref string value);
        partial void OnTimeOfRepairChanging(ref string value);
        partial void OnTimeOfRepairChanged();

        /// <summary>
        /// 故障描述
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string FaultDescription
        {
            get
            {
                string value = _FaultDescription;
                OnGetFaultDescription(ref value);
                return value;
            }
            set
            {
                if (_FaultDescription != value)
                {
                    OnFaultDescriptionChanging(ref value);
                    ReportPropertyChanging("FaultDescription");
                    _FaultDescription = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("FaultDescription");
                    OnFaultDescriptionChanged();
                }
            }
        }
        private string _FaultDescription;
        partial void OnGetFaultDescription(ref string value);
        partial void OnFaultDescriptionChanging(ref string value);
        partial void OnFaultDescriptionChanged();

        /// <summary>
        /// 完成时间
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string CompletionTime
        {
            get
            {
                string value = _CompletionTime;
                OnGetCompletionTime(ref value);
                return value;
            }
            set
            {
                if (_CompletionTime != value)
                {
                    OnCompletionTimeChanging(ref value);
                    ReportPropertyChanging("CompletionTime");
                    _CompletionTime = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("CompletionTime");
                    OnCompletionTimeChanged();
                }
            }
        }
        private string _CompletionTime;
        partial void OnGetCompletionTime(ref string value);
        partial void OnCompletionTimeChanging(ref string value);
        partial void OnCompletionTimeChanged();

        /// <summary>
        /// 维修级别
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string MaintenanceLevel
        {
            get
            {
                string value = _MaintenanceLevel;
                OnGetMaintenanceLevel(ref value);
                return value;
            }
            set
            {
                if (_MaintenanceLevel != value)
                {
                    OnMaintenanceLevelChanging(ref value);
                    ReportPropertyChanging("MaintenanceLevel");
                    _MaintenanceLevel = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("MaintenanceLevel");
                    OnMaintenanceLevelChanged();
                }
            }
        }
        private string _MaintenanceLevel;
        partial void OnGetMaintenanceLevel(ref string value);
        partial void OnMaintenanceLevelChanging(ref string value);
        partial void OnMaintenanceLevelChanged();

        /// <summary>
        /// 维修费用
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string MaintenanceCost
        {
            get
            {
                string value = _MaintenanceCost;
                OnGetMaintenanceCost(ref value);
                return value;
            }
            set
            {
                if (_MaintenanceCost != value)
                {
                    OnMaintenanceCostChanging(ref value);
                    ReportPropertyChanging("MaintenanceCost");
                    _MaintenanceCost = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("MaintenanceCost");
                    OnMaintenanceCostChanged();
                }
            }
        }
        private string _MaintenanceCost;
        partial void OnGetMaintenanceCost(ref string value);
        partial void OnMaintenanceCostChanging(ref string value);
        partial void OnMaintenanceCostChanged();

        /// <summary>
        /// 维修负责�?
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string MaintenanceResponsiblePerson
        {
            get
            {
                string value = _MaintenanceResponsiblePerson;
                OnGetMaintenanceResponsiblePerson(ref value);
                return value;
            }
            set
            {
                if (_MaintenanceResponsiblePerson != value)
                {
                    OnMaintenanceResponsiblePersonChanging(ref value);
                    ReportPropertyChanging("MaintenanceResponsiblePerson");
                    _MaintenanceResponsiblePerson = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("MaintenanceResponsiblePerson");
                    OnMaintenanceResponsiblePersonChanged();
                }
            }
        }
        private string _MaintenanceResponsiblePerson;
        partial void OnGetMaintenanceResponsiblePerson(ref string value);
        partial void OnMaintenanceResponsiblePersonChanging(ref string value);
        partial void OnMaintenanceResponsiblePersonChanged();

        /// <summary>
        /// 故障分析及工作明�?
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string FaultAnalysisAndWorkDetails
        {
            get
            {
                string value = _FaultAnalysisAndWorkDetails;
                OnGetFaultAnalysisAndWorkDetails(ref value);
                return value;
            }
            set
            {
                if (_FaultAnalysisAndWorkDetails != value)
                {
                    OnFaultAnalysisAndWorkDetailsChanging(ref value);
                    ReportPropertyChanging("FaultAnalysisAndWorkDetails");
                    _FaultAnalysisAndWorkDetails = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("FaultAnalysisAndWorkDetails");
                    OnFaultAnalysisAndWorkDetailsChanged();
                }
            }
        }
        private string _FaultAnalysisAndWorkDetails;
        partial void OnGetFaultAnalysisAndWorkDetails(ref string value);
        partial void OnFaultAnalysisAndWorkDetailsChanging(ref string value);
        partial void OnFaultAnalysisAndWorkDetailsChanged();

        /// <summary>
        /// 评分
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Rating
        {
            get
            {
                string value = _Rating;
                OnGetRating(ref value);
                return value;
            }
            set
            {
                if (_Rating != value)
                {
                    OnRatingChanging(ref value);
                    ReportPropertyChanging("Rating");
                    _Rating = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Rating");
                    OnRatingChanged();
                }
            }
        }
        private string _Rating;
        partial void OnGetRating(ref string value);
        partial void OnRatingChanging(ref string value);
        partial void OnRatingChanged();

        /// <summary>
        /// 故障类别
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string FaultCategory
        {
            get
            {
                string value = _FaultCategory;
                OnGetFaultCategory(ref value);
                return value;
            }
            set
            {
                if (_FaultCategory != value)
                {
                    OnFaultCategoryChanging(ref value);
                    ReportPropertyChanging("FaultCategory");
                    _FaultCategory = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("FaultCategory");
                    OnFaultCategoryChanged();
                }
            }
        }
        private string _FaultCategory;
        partial void OnGetFaultCategory(ref string value);
        partial void OnFaultCategoryChanging(ref string value);
        partial void OnFaultCategoryChanged();

        /// <summary>
        /// 拒绝原因
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string ReasonForRejection
        {
            get
            {
                string value = _ReasonForRejection;
                OnGetReasonForRejection(ref value);
                return value;
            }
            set
            {
                if (_ReasonForRejection != value)
                {
                    OnReasonForRejectionChanging(ref value);
                    ReportPropertyChanging("ReasonForRejection");
                    _ReasonForRejection = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("ReasonForRejection");
                    OnReasonForRejectionChanged();
                }
            }
        }
        private string _ReasonForRejection;
        partial void OnGetReasonForRejection(ref string value);
        partial void OnReasonForRejectionChanging(ref string value);
        partial void OnReasonForRejectionChanged();

        /// <summary>
        /// 记录�?
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? RecordCount
        {
            get
            {
                int? value = _RecordCount;
                OnGetRecordCount(ref value);
                return value;
            }
            set
            {
                if (_RecordCount != value)
                {
                    OnRecordCountChanging(ref value);
                    ReportPropertyChanging("RecordCount");
                    _RecordCount = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RecordCount");
                    OnRecordCountChanged();
                }
            }
        }
        private int? _RecordCount;
        partial void OnGetRecordCount(ref int? value);
        partial void OnRecordCountChanging(ref int? value);
        partial void OnRecordCountChanged();

        #endregion
    }

    /// <summary>
    /// 设备维修替换备件�?
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "EquipmentMaintenanceReplacementSparePart")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class EquipmentMaintenanceReplacementSparePart : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new EquipmentMaintenanceReplacementSparePart object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static EquipmentMaintenanceReplacementSparePart CreateEquipmentMaintenanceReplacementSparePart(int id)
        {
            EquipmentMaintenanceReplacementSparePart equipmentMaintenanceReplacementSparePart = new EquipmentMaintenanceReplacementSparePart();
            equipmentMaintenanceReplacementSparePart.Id = id;
            return equipmentMaintenanceReplacementSparePart;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 备件编号ID
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string SparePartNumberId
        {
            get
            {
                string value = _SparePartNumberId;
                OnGetSparePartNumberId(ref value);
                return value;
            }
            set
            {
                if (_SparePartNumberId != value)
                {
                    OnSparePartNumberIdChanging(ref value);
                    ReportPropertyChanging("SparePartNumberId");
                    _SparePartNumberId = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("SparePartNumberId");
                    OnSparePartNumberIdChanged();
                }
            }
        }
        private string _SparePartNumberId;
        partial void OnGetSparePartNumberId(ref string value);
        partial void OnSparePartNumberIdChanging(ref string value);
        partial void OnSparePartNumberIdChanged();

        /// <summary>
        /// 维修单号ID
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string MaintenanceOrderNumberId
        {
            get
            {
                string value = _MaintenanceOrderNumberId;
                OnGetMaintenanceOrderNumberId(ref value);
                return value;
            }
            set
            {
                if (_MaintenanceOrderNumberId != value)
                {
                    OnMaintenanceOrderNumberIdChanging(ref value);
                    ReportPropertyChanging("MaintenanceOrderNumberId");
                    _MaintenanceOrderNumberId = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("MaintenanceOrderNumberId");
                    OnMaintenanceOrderNumberIdChanged();
                }
            }
        }
        private string _MaintenanceOrderNumberId;
        partial void OnGetMaintenanceOrderNumberId(ref string value);
        partial void OnMaintenanceOrderNumberIdChanging(ref string value);
        partial void OnMaintenanceOrderNumberIdChanged();

        /// <summary>
        /// 使用数量
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? UsageQuantity
        {
            get
            {
                int? value = _UsageQuantity;
                OnGetUsageQuantity(ref value);
                return value;
            }
            set
            {
                if (_UsageQuantity != value)
                {
                    OnUsageQuantityChanging(ref value);
                    ReportPropertyChanging("UsageQuantity");
                    _UsageQuantity = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UsageQuantity");
                    OnUsageQuantityChanged();
                }
            }
        }
        private int? _UsageQuantity;
        partial void OnGetUsageQuantity(ref int? value);
        partial void OnUsageQuantityChanging(ref int? value);
        partial void OnUsageQuantityChanged();

        /// <summary>
        /// 使用日期
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string UsageDate
        {
            get
            {
                string value = _UsageDate;
                OnGetUsageDate(ref value);
                return value;
            }
            set
            {
                if (_UsageDate != value)
                {
                    OnUsageDateChanging(ref value);
                    ReportPropertyChanging("UsageDate");
                    _UsageDate = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("UsageDate");
                    OnUsageDateChanged();
                }
            }
        }
        private string _UsageDate;
        partial void OnGetUsageDate(ref string value);
        partial void OnUsageDateChanging(ref string value);
        partial void OnUsageDateChanged();

        #endregion
    }

    /// <summary>
    /// 设备类型
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "EquipmentType")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class EquipmentType : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new EquipmentType object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static EquipmentType CreateEquipmentType(int id)
        {
            EquipmentType equipmentType = new EquipmentType();
            equipmentType.Id = id;
            return equipmentType;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 设备类型名称
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string EquipmentTypeName
        {
            get
            {
                string value = _EquipmentTypeName;
                OnGetEquipmentTypeName(ref value);
                return value;
            }
            set
            {
                if (_EquipmentTypeName != value)
                {
                    OnEquipmentTypeNameChanging(ref value);
                    ReportPropertyChanging("EquipmentTypeName");
                    _EquipmentTypeName = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("EquipmentTypeName");
                    OnEquipmentTypeNameChanged();
                }
            }
        }
        private string _EquipmentTypeName;
        partial void OnGetEquipmentTypeName(ref string value);
        partial void OnEquipmentTypeNameChanging(ref string value);
        partial void OnEquipmentTypeNameChanged();

        /// <summary>
        /// 备注
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Remarks
        {
            get
            {
                string value = _Remarks;
                OnGetRemarks(ref value);
                return value;
            }
            set
            {
                if (_Remarks != value)
                {
                    OnRemarksChanging(ref value);
                    ReportPropertyChanging("Remarks");
                    _Remarks = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Remarks");
                    OnRemarksChanged();
                }
            }
        }
        private string _Remarks;
        partial void OnGetRemarks(ref string value);
        partial void OnRemarksChanging(ref string value);
        partial void OnRemarksChanged();

        #endregion
    }

    /// <summary>
    /// 故障类别
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "FaultCategory")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class FaultCategory : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new FaultCategory object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static FaultCategory CreateFaultCategory(int id)
        {
            FaultCategory faultCategory = new FaultCategory();
            faultCategory.Id = id;
            return faultCategory;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 故障名称
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string FaultName
        {
            get
            {
                string value = _FaultName;
                OnGetFaultName(ref value);
                return value;
            }
            set
            {
                if (_FaultName != value)
                {
                    OnFaultNameChanging(ref value);
                    ReportPropertyChanging("FaultName");
                    _FaultName = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("FaultName");
                    OnFaultNameChanged();
                }
            }
        }
        private string _FaultName;
        partial void OnGetFaultName(ref string value);
        partial void OnFaultNameChanging(ref string value);
        partial void OnFaultNameChanged();

        /// <summary>
        /// 备注
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Remarks
        {
            get
            {
                string value = _Remarks;
                OnGetRemarks(ref value);
                return value;
            }
            set
            {
                if (_Remarks != value)
                {
                    OnRemarksChanging(ref value);
                    ReportPropertyChanging("Remarks");
                    _Remarks = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Remarks");
                    OnRemarksChanged();
                }
            }
        }
        private string _Remarks;
        partial void OnGetRemarks(ref string value);
        partial void OnRemarksChanging(ref string value);
        partial void OnRemarksChanged();

        #endregion
    }

    /// <summary>
    /// 安装地点信息
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "InstallationLocationInfo")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class InstallationLocationInfo : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new InstallationLocationInfo object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static InstallationLocationInfo CreateInstallationLocationInfo(int id)
        {
            InstallationLocationInfo installationLocationInfo = new InstallationLocationInfo();
            installationLocationInfo.Id = id;
            return installationLocationInfo;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 地点名称
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string LocationName
        {
            get
            {
                string value = _LocationName;
                OnGetLocationName(ref value);
                return value;
            }
            set
            {
                if (_LocationName != value)
                {
                    OnLocationNameChanging(ref value);
                    ReportPropertyChanging("LocationName");
                    _LocationName = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("LocationName");
                    OnLocationNameChanged();
                }
            }
        }
        private string _LocationName;
        partial void OnGetLocationName(ref string value);
        partial void OnLocationNameChanging(ref string value);
        partial void OnLocationNameChanged();

        #endregion
    }

    /// <summary>
    /// 维修级别
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "MaintenanceLevel")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class MaintenanceLevel : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new MaintenanceLevel object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static MaintenanceLevel CreateMaintenanceLevel(int id)
        {
            MaintenanceLevel maintenanceLevel = new MaintenanceLevel();
            maintenanceLevel.Id = id;
            return maintenanceLevel;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 维修级别名称
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string MaintenanceLevelName
        {
            get
            {
                string value = _MaintenanceLevelName;
                OnGetMaintenanceLevelName(ref value);
                return value;
            }
            set
            {
                if (_MaintenanceLevelName != value)
                {
                    OnMaintenanceLevelNameChanging(ref value);
                    ReportPropertyChanging("MaintenanceLevelName");
                    _MaintenanceLevelName = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("MaintenanceLevelName");
                    OnMaintenanceLevelNameChanged();
                }
            }
        }
        private string _MaintenanceLevelName;
        partial void OnGetMaintenanceLevelName(ref string value);
        partial void OnMaintenanceLevelNameChanging(ref string value);
        partial void OnMaintenanceLevelNameChanged();

        /// <summary>
        /// 备注
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Remarks
        {
            get
            {
                string value = _Remarks;
                OnGetRemarks(ref value);
                return value;
            }
            set
            {
                if (_Remarks != value)
                {
                    OnRemarksChanging(ref value);
                    ReportPropertyChanging("Remarks");
                    _Remarks = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Remarks");
                    OnRemarksChanged();
                }
            }
        }
        private string _Remarks;
        partial void OnGetRemarks(ref string value);
        partial void OnRemarksChanging(ref string value);
        partial void OnRemarksChanged();

        #endregion
    }

    /// <summary>
    /// 合作单位信息
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "PartnerInfo")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class PartnerInfo : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new PartnerInfo object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="unitNumber">Initial value of UnitNumber.</param>
        public static PartnerInfo CreatePartnerInfo(int id, string unitNumber)
        {
            PartnerInfo partnerInfo = new PartnerInfo();
            partnerInfo.Id = id;
            partnerInfo.UnitNumber = unitNumber;
            return partnerInfo;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 单位编号
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable = false)]
        [DataMemberAttribute()]
        public virtual string UnitNumber
        {
            get
            {
                string value = _UnitNumber;
                OnGetUnitNumber(ref value);
                return value;
            }
            set
            {
                if (_UnitNumber != value)
                {
                    OnUnitNumberChanging(ref value);
                    ReportPropertyChanging("UnitNumber");
                    _UnitNumber = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("UnitNumber");
                    OnUnitNumberChanged();
                }
            }
        }
        private string _UnitNumber;
        partial void OnGetUnitNumber(ref string value);
        partial void OnUnitNumberChanging(ref string value);
        partial void OnUnitNumberChanged();

        /// <summary>
        /// 单位名称
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string UnitName
        {
            get
            {
                string value = _UnitName;
                OnGetUnitName(ref value);
                return value;
            }
            set
            {
                if (_UnitName != value)
                {
                    OnUnitNameChanging(ref value);
                    ReportPropertyChanging("UnitName");
                    _UnitName = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("UnitName");
                    OnUnitNameChanged();
                }
            }
        }
        private string _UnitName;
        partial void OnGetUnitName(ref string value);
        partial void OnUnitNameChanging(ref string value);
        partial void OnUnitNameChanged();

        /// <summary>
        /// 单位类型ID
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? UnitTypeId
        {
            get
            {
                int? value = _UnitTypeId;
                OnGetUnitTypeId(ref value);
                return value;
            }
            set
            {
                if (_UnitTypeId != value)
                {
                    OnUnitTypeIdChanging(ref value);
                    ReportPropertyChanging("UnitTypeId");
                    _UnitTypeId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UnitTypeId");
                    OnUnitTypeIdChanged();
                }
            }
        }
        private int? _UnitTypeId;
        partial void OnGetUnitTypeId(ref int? value);
        partial void OnUnitTypeIdChanging(ref int? value);
        partial void OnUnitTypeIdChanged();

        /// <summary>
        /// 联系�?
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string ContactPerson
        {
            get
            {
                string value = _ContactPerson;
                OnGetContactPerson(ref value);
                return value;
            }
            set
            {
                if (_ContactPerson != value)
                {
                    OnContactPersonChanging(ref value);
                    ReportPropertyChanging("ContactPerson");
                    _ContactPerson = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("ContactPerson");
                    OnContactPersonChanged();
                }
            }
        }
        private string _ContactPerson;
        partial void OnGetContactPerson(ref string value);
        partial void OnContactPersonChanging(ref string value);
        partial void OnContactPersonChanged();

        /// <summary>
        /// 联系电话
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string ContactPhone
        {
            get
            {
                string value = _ContactPhone;
                OnGetContactPhone(ref value);
                return value;
            }
            set
            {
                if (_ContactPhone != value)
                {
                    OnContactPhoneChanging(ref value);
                    ReportPropertyChanging("ContactPhone");
                    _ContactPhone = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("ContactPhone");
                    OnContactPhoneChanged();
                }
            }
        }
        private string _ContactPhone;
        partial void OnGetContactPhone(ref string value);
        partial void OnContactPhoneChanging(ref string value);
        partial void OnContactPhoneChanged();

        /// <summary>
        /// 传真
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Fax
        {
            get
            {
                string value = _Fax;
                OnGetFax(ref value);
                return value;
            }
            set
            {
                if (_Fax != value)
                {
                    OnFaxChanging(ref value);
                    ReportPropertyChanging("Fax");
                    _Fax = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Fax");
                    OnFaxChanged();
                }
            }
        }
        private string _Fax;
        partial void OnGetFax(ref string value);
        partial void OnFaxChanging(ref string value);
        partial void OnFaxChanged();

        /// <summary>
        /// 税号
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string TaxNumber
        {
            get
            {
                string value = _TaxNumber;
                OnGetTaxNumber(ref value);
                return value;
            }
            set
            {
                if (_TaxNumber != value)
                {
                    OnTaxNumberChanging(ref value);
                    ReportPropertyChanging("TaxNumber");
                    _TaxNumber = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("TaxNumber");
                    OnTaxNumberChanged();
                }
            }
        }
        private string _TaxNumber;
        partial void OnGetTaxNumber(ref string value);
        partial void OnTaxNumberChanging(ref string value);
        partial void OnTaxNumberChanged();

        /// <summary>
        /// 地址
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Address
        {
            get
            {
                string value = _Address;
                OnGetAddress(ref value);
                return value;
            }
            set
            {
                if (_Address != value)
                {
                    OnAddressChanging(ref value);
                    ReportPropertyChanging("Address");
                    _Address = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Address");
                    OnAddressChanged();
                }
            }
        }
        private string _Address;
        partial void OnGetAddress(ref string value);
        partial void OnAddressChanging(ref string value);
        partial void OnAddressChanged();

        /// <summary>
        /// 邮编
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string PostalCode
        {
            get
            {
                string value = _PostalCode;
                OnGetPostalCode(ref value);
                return value;
            }
            set
            {
                if (_PostalCode != value)
                {
                    OnPostalCodeChanging(ref value);
                    ReportPropertyChanging("PostalCode");
                    _PostalCode = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("PostalCode");
                    OnPostalCodeChanged();
                }
            }
        }
        private string _PostalCode;
        partial void OnGetPostalCode(ref string value);
        partial void OnPostalCodeChanging(ref string value);
        partial void OnPostalCodeChanged();

        /// <summary>
        /// 电子信箱
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Email
        {
            get
            {
                string value = _Email;
                OnGetEmail(ref value);
                return value;
            }
            set
            {
                if (_Email != value)
                {
                    OnEmailChanging(ref value);
                    ReportPropertyChanging("Email");
                    _Email = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Email");
                    OnEmailChanged();
                }
            }
        }
        private string _Email;
        partial void OnGetEmail(ref string value);
        partial void OnEmailChanging(ref string value);
        partial void OnEmailChanged();

        /// <summary>
        /// 开户银�?
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string BankName
        {
            get
            {
                string value = _BankName;
                OnGetBankName(ref value);
                return value;
            }
            set
            {
                if (_BankName != value)
                {
                    OnBankNameChanging(ref value);
                    ReportPropertyChanging("BankName");
                    _BankName = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("BankName");
                    OnBankNameChanged();
                }
            }
        }
        private string _BankName;
        partial void OnGetBankName(ref string value);
        partial void OnBankNameChanging(ref string value);
        partial void OnBankNameChanged();

        /// <summary>
        /// 账户
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Account
        {
            get
            {
                string value = _Account;
                OnGetAccount(ref value);
                return value;
            }
            set
            {
                if (_Account != value)
                {
                    OnAccountChanging(ref value);
                    ReportPropertyChanging("Account");
                    _Account = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Account");
                    OnAccountChanged();
                }
            }
        }
        private string _Account;
        partial void OnGetAccount(ref string value);
        partial void OnAccountChanging(ref string value);
        partial void OnAccountChanged();

        /// <summary>
        /// 备注
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Remarks
        {
            get
            {
                string value = _Remarks;
                OnGetRemarks(ref value);
                return value;
            }
            set
            {
                if (_Remarks != value)
                {
                    OnRemarksChanging(ref value);
                    ReportPropertyChanging("Remarks");
                    _Remarks = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Remarks");
                    OnRemarksChanged();
                }
            }
        }
        private string _Remarks;
        partial void OnGetRemarks(ref string value);
        partial void OnRemarksChanging(ref string value);
        partial void OnRemarksChanged();

        /// <summary>
        /// 合作单位总数
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? TotalPartners
        {
            get
            {
                int? value = _TotalPartners;
                OnGetTotalPartners(ref value);
                return value;
            }
            set
            {
                if (_TotalPartners != value)
                {
                    OnTotalPartnersChanging(ref value);
                    ReportPropertyChanging("TotalPartners");
                    _TotalPartners = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TotalPartners");
                    OnTotalPartnersChanged();
                }
            }
        }
        private int? _TotalPartners;
        partial void OnGetTotalPartners(ref int? value);
        partial void OnTotalPartnersChanging(ref int? value);
        partial void OnTotalPartnersChanged();

        #endregion
    }

    /// <summary>
    /// 备件信息�?
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "SparePartInfo")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class SparePartInfo : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new SparePartInfo object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="sparePartNumber">Initial value of SparePartNumber.</param>
        /// <param name="sparePartName">Initial value of SparePartName.</param>
        public static SparePartInfo CreateSparePartInfo(int id, string sparePartNumber, string sparePartName)
        {
            SparePartInfo sparePartInfo = new SparePartInfo();
            sparePartInfo.Id = id;
            sparePartInfo.SparePartNumber = sparePartNumber;
            sparePartInfo.SparePartName = sparePartName;
            return sparePartInfo;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 备件编号
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable = false)]
        [DataMemberAttribute()]
        public virtual string SparePartNumber
        {
            get
            {
                string value = _SparePartNumber;
                OnGetSparePartNumber(ref value);
                return value;
            }
            set
            {
                if (_SparePartNumber != value)
                {
                    OnSparePartNumberChanging(ref value);
                    ReportPropertyChanging("SparePartNumber");
                    _SparePartNumber = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("SparePartNumber");
                    OnSparePartNumberChanged();
                }
            }
        }
        private string _SparePartNumber;
        partial void OnGetSparePartNumber(ref string value);
        partial void OnSparePartNumberChanging(ref string value);
        partial void OnSparePartNumberChanged();

        /// <summary>
        /// 备件名称
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable = false)]
        [DataMemberAttribute()]
        public virtual string SparePartName
        {
            get
            {
                string value = _SparePartName;
                OnGetSparePartName(ref value);
                return value;
            }
            set
            {
                if (_SparePartName != value)
                {
                    OnSparePartNameChanging(ref value);
                    ReportPropertyChanging("SparePartName");
                    _SparePartName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("SparePartName");
                    OnSparePartNameChanged();
                }
            }
        }
        private string _SparePartName;
        partial void OnGetSparePartName(ref string value);
        partial void OnSparePartNameChanging(ref string value);
        partial void OnSparePartNameChanged();

        /// <summary>
        /// 规格型号
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string SpecificationModel
        {
            get
            {
                string value = _SpecificationModel;
                OnGetSpecificationModel(ref value);
                return value;
            }
            set
            {
                if (_SpecificationModel != value)
                {
                    OnSpecificationModelChanging(ref value);
                    ReportPropertyChanging("SpecificationModel");
                    _SpecificationModel = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("SpecificationModel");
                    OnSpecificationModelChanged();
                }
            }
        }
        private string _SpecificationModel;
        partial void OnGetSpecificationModel(ref string value);
        partial void OnSpecificationModelChanging(ref string value);
        partial void OnSpecificationModelChanged();

        /// <summary>
        /// 备件图片
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string SparePartImage
        {
            get
            {
                string value = _SparePartImage;
                OnGetSparePartImage(ref value);
                return value;
            }
            set
            {
                if (_SparePartImage != value)
                {
                    OnSparePartImageChanging(ref value);
                    ReportPropertyChanging("SparePartImage");
                    _SparePartImage = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("SparePartImage");
                    OnSparePartImageChanged();
                }
            }
        }
        private string _SparePartImage;
        partial void OnGetSparePartImage(ref string value);
        partial void OnSparePartImageChanging(ref string value);
        partial void OnSparePartImageChanged();

        /// <summary>
        /// 备件类型ID
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? SparePartTypeId
        {
            get
            {
                int? value = _SparePartTypeId;
                OnGetSparePartTypeId(ref value);
                return value;
            }
            set
            {
                if (_SparePartTypeId != value)
                {
                    OnSparePartTypeIdChanging(ref value);
                    ReportPropertyChanging("SparePartTypeId");
                    _SparePartTypeId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SparePartTypeId");
                    OnSparePartTypeIdChanged();
                }
            }
        }
        private int? _SparePartTypeId;
        partial void OnGetSparePartTypeId(ref int? value);
        partial void OnSparePartTypeIdChanging(ref int? value);
        partial void OnSparePartTypeIdChanged();

        /// <summary>
        /// 计量单位
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string UnitOfMeasurement
        {
            get
            {
                string value = _UnitOfMeasurement;
                OnGetUnitOfMeasurement(ref value);
                return value;
            }
            set
            {
                if (_UnitOfMeasurement != value)
                {
                    OnUnitOfMeasurementChanging(ref value);
                    ReportPropertyChanging("UnitOfMeasurement");
                    _UnitOfMeasurement = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("UnitOfMeasurement");
                    OnUnitOfMeasurementChanged();
                }
            }
        }
        private string _UnitOfMeasurement;
        partial void OnGetUnitOfMeasurement(ref string value);
        partial void OnUnitOfMeasurementChanging(ref string value);
        partial void OnUnitOfMeasurementChanged();

        /// <summary>
        /// 单价
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string UnitPrice
        {
            get
            {
                string value = _UnitPrice;
                OnGetUnitPrice(ref value);
                return value;
            }
            set
            {
                if (_UnitPrice != value)
                {
                    OnUnitPriceChanging(ref value);
                    ReportPropertyChanging("UnitPrice");
                    _UnitPrice = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("UnitPrice");
                    OnUnitPriceChanged();
                }
            }
        }
        private string _UnitPrice;
        partial void OnGetUnitPrice(ref string value);
        partial void OnUnitPriceChanging(ref string value);
        partial void OnUnitPriceChanged();

        /// <summary>
        /// 生产厂商
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Manufacturer
        {
            get
            {
                string value = _Manufacturer;
                OnGetManufacturer(ref value);
                return value;
            }
            set
            {
                if (_Manufacturer != value)
                {
                    OnManufacturerChanging(ref value);
                    ReportPropertyChanging("Manufacturer");
                    _Manufacturer = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Manufacturer");
                    OnManufacturerChanged();
                }
            }
        }
        private string _Manufacturer;
        partial void OnGetManufacturer(ref string value);
        partial void OnManufacturerChanging(ref string value);
        partial void OnManufacturerChanged();

        /// <summary>
        /// 经销�?
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Distributor
        {
            get
            {
                string value = _Distributor;
                OnGetDistributor(ref value);
                return value;
            }
            set
            {
                if (_Distributor != value)
                {
                    OnDistributorChanging(ref value);
                    ReportPropertyChanging("Distributor");
                    _Distributor = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Distributor");
                    OnDistributorChanged();
                }
            }
        }
        private string _Distributor;
        partial void OnGetDistributor(ref string value);
        partial void OnDistributorChanging(ref string value);
        partial void OnDistributorChanged();

        /// <summary>
        /// 存放位置
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? StorageLocation
        {
            get
            {
                int? value = _StorageLocation;
                OnGetStorageLocation(ref value);
                return value;
            }
            set
            {
                if (_StorageLocation != value)
                {
                    OnStorageLocationChanging(ref value);
                    ReportPropertyChanging("StorageLocation");
                    _StorageLocation = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StorageLocation");
                    OnStorageLocationChanged();
                }
            }
        }
        private int? _StorageLocation;
        partial void OnGetStorageLocation(ref int? value);
        partial void OnStorageLocationChanging(ref int? value);
        partial void OnStorageLocationChanged();

        /// <summary>
        /// 当前库存
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? CurrentInventory
        {
            get
            {
                int? value = _CurrentInventory;
                OnGetCurrentInventory(ref value);
                return value;
            }
            set
            {
                if (_CurrentInventory != value)
                {
                    OnCurrentInventoryChanging(ref value);
                    ReportPropertyChanging("CurrentInventory");
                    _CurrentInventory = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CurrentInventory");
                    OnCurrentInventoryChanged();
                }
            }
        }
        private int? _CurrentInventory;
        partial void OnGetCurrentInventory(ref int? value);
        partial void OnCurrentInventoryChanging(ref int? value);
        partial void OnCurrentInventoryChanged();

        /// <summary>
        /// 备注
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Remarks
        {
            get
            {
                string value = _Remarks;
                OnGetRemarks(ref value);
                return value;
            }
            set
            {
                if (_Remarks != value)
                {
                    OnRemarksChanging(ref value);
                    ReportPropertyChanging("Remarks");
                    _Remarks = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Remarks");
                    OnRemarksChanged();
                }
            }
        }
        private string _Remarks;
        partial void OnGetRemarks(ref string value);
        partial void OnRemarksChanging(ref string value);
        partial void OnRemarksChanged();

        #endregion
    }

    /// <summary>
    /// 备件库存变化历史
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "SparePartInventoryChangeHistory")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class SparePartInventoryChangeHistory : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new SparePartInventoryChangeHistory object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static SparePartInventoryChangeHistory CreateSparePartInventoryChangeHistory(int id)
        {
            SparePartInventoryChangeHistory sparePartInventoryChangeHistory = new SparePartInventoryChangeHistory();
            sparePartInventoryChangeHistory.Id = id;
            return sparePartInventoryChangeHistory;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 备件编号
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string SparePartNumber
        {
            get
            {
                string value = _SparePartNumber;
                OnGetSparePartNumber(ref value);
                return value;
            }
            set
            {
                if (_SparePartNumber != value)
                {
                    OnSparePartNumberChanging(ref value);
                    ReportPropertyChanging("SparePartNumber");
                    _SparePartNumber = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("SparePartNumber");
                    OnSparePartNumberChanged();
                }
            }
        }
        private string _SparePartNumber;
        partial void OnGetSparePartNumber(ref string value);
        partial void OnSparePartNumberChanging(ref string value);
        partial void OnSparePartNumberChanged();

        /// <summary>
        /// 操作�?
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Operator
        {
            get
            {
                string value = _Operator;
                OnGetOperator(ref value);
                return value;
            }
            set
            {
                if (_Operator != value)
                {
                    OnOperatorChanging(ref value);
                    ReportPropertyChanging("Operator");
                    _Operator = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Operator");
                    OnOperatorChanged();
                }
            }
        }
        private string _Operator;
        partial void OnGetOperator(ref string value);
        partial void OnOperatorChanging(ref string value);
        partial void OnOperatorChanged();

        /// <summary>
        /// 操作时间
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string OperationTime
        {
            get
            {
                string value = _OperationTime;
                OnGetOperationTime(ref value);
                return value;
            }
            set
            {
                if (_OperationTime != value)
                {
                    OnOperationTimeChanging(ref value);
                    ReportPropertyChanging("OperationTime");
                    _OperationTime = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("OperationTime");
                    OnOperationTimeChanged();
                }
            }
        }
        private string _OperationTime;
        partial void OnGetOperationTime(ref string value);
        partial void OnOperationTimeChanging(ref string value);
        partial void OnOperationTimeChanged();

        /// <summary>
        /// 出入库类�?
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string InventoryChangeType
        {
            get
            {
                string value = _InventoryChangeType;
                OnGetInventoryChangeType(ref value);
                return value;
            }
            set
            {
                if (_InventoryChangeType != value)
                {
                    OnInventoryChangeTypeChanging(ref value);
                    ReportPropertyChanging("InventoryChangeType");
                    _InventoryChangeType = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("InventoryChangeType");
                    OnInventoryChangeTypeChanged();
                }
            }
        }
        private string _InventoryChangeType;
        partial void OnGetInventoryChangeType(ref string value);
        partial void OnInventoryChangeTypeChanging(ref string value);
        partial void OnInventoryChangeTypeChanged();

        /// <summary>
        /// 库存变化原因ID
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? InventoryChangeReasonId
        {
            get
            {
                int? value = _InventoryChangeReasonId;
                OnGetInventoryChangeReasonId(ref value);
                return value;
            }
            set
            {
                if (_InventoryChangeReasonId != value)
                {
                    OnInventoryChangeReasonIdChanging(ref value);
                    ReportPropertyChanging("InventoryChangeReasonId");
                    _InventoryChangeReasonId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("InventoryChangeReasonId");
                    OnInventoryChangeReasonIdChanged();
                }
            }
        }
        private int? _InventoryChangeReasonId;
        partial void OnGetInventoryChangeReasonId(ref int? value);
        partial void OnInventoryChangeReasonIdChanging(ref int? value);
        partial void OnInventoryChangeReasonIdChanged();

        /// <summary>
        /// 期初库存
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? InitialInventory
        {
            get
            {
                int? value = _InitialInventory;
                OnGetInitialInventory(ref value);
                return value;
            }
            set
            {
                if (_InitialInventory != value)
                {
                    OnInitialInventoryChanging(ref value);
                    ReportPropertyChanging("InitialInventory");
                    _InitialInventory = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("InitialInventory");
                    OnInitialInventoryChanged();
                }
            }
        }
        private int? _InitialInventory;
        partial void OnGetInitialInventory(ref int? value);
        partial void OnInitialInventoryChanging(ref int? value);
        partial void OnInitialInventoryChanged();

        /// <summary>
        /// 变化数量
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string ChangeQuantity
        {
            get
            {
                string value = _ChangeQuantity;
                OnGetChangeQuantity(ref value);
                return value;
            }
            set
            {
                if (_ChangeQuantity != value)
                {
                    OnChangeQuantityChanging(ref value);
                    ReportPropertyChanging("ChangeQuantity");
                    _ChangeQuantity = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("ChangeQuantity");
                    OnChangeQuantityChanged();
                }
            }
        }
        private string _ChangeQuantity;
        partial void OnGetChangeQuantity(ref string value);
        partial void OnChangeQuantityChanging(ref string value);
        partial void OnChangeQuantityChanged();

        /// <summary>
        /// 变化历史合计
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? ChangeHistoryTotal
        {
            get
            {
                int? value = _ChangeHistoryTotal;
                OnGetChangeHistoryTotal(ref value);
                return value;
            }
            set
            {
                if (_ChangeHistoryTotal != value)
                {
                    OnChangeHistoryTotalChanging(ref value);
                    ReportPropertyChanging("ChangeHistoryTotal");
                    _ChangeHistoryTotal = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ChangeHistoryTotal");
                    OnChangeHistoryTotalChanged();
                }
            }
        }
        private int? _ChangeHistoryTotal;
        partial void OnGetChangeHistoryTotal(ref int? value);
        partial void OnChangeHistoryTotalChanging(ref int? value);
        partial void OnChangeHistoryTotalChanged();

        #endregion
    }

    /// <summary>
    /// 备件库存变化原因�?
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "SparePartInventoryChangeReason")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class SparePartInventoryChangeReason : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new SparePartInventoryChangeReason object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static SparePartInventoryChangeReason CreateSparePartInventoryChangeReason(int id)
        {
            SparePartInventoryChangeReason sparePartInventoryChangeReason = new SparePartInventoryChangeReason();
            sparePartInventoryChangeReason.Id = id;
            return sparePartInventoryChangeReason;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 库存变化类型
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? InventoryChangeType
        {
            get
            {
                int? value = _InventoryChangeType;
                OnGetInventoryChangeType(ref value);
                return value;
            }
            set
            {
                if (_InventoryChangeType != value)
                {
                    OnInventoryChangeTypeChanging(ref value);
                    ReportPropertyChanging("InventoryChangeType");
                    _InventoryChangeType = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("InventoryChangeType");
                    OnInventoryChangeTypeChanged();
                }
            }
        }
        private int? _InventoryChangeType;
        partial void OnGetInventoryChangeType(ref int? value);
        partial void OnInventoryChangeTypeChanging(ref int? value);
        partial void OnInventoryChangeTypeChanged();

        /// <summary>
        /// 变化名称
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string ChangeName
        {
            get
            {
                string value = _ChangeName;
                OnGetChangeName(ref value);
                return value;
            }
            set
            {
                if (_ChangeName != value)
                {
                    OnChangeNameChanging(ref value);
                    ReportPropertyChanging("ChangeName");
                    _ChangeName = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("ChangeName");
                    OnChangeNameChanged();
                }
            }
        }
        private string _ChangeName;
        partial void OnGetChangeName(ref string value);
        partial void OnChangeNameChanging(ref string value);
        partial void OnChangeNameChanged();

        #endregion
    }

    /// <summary>
    /// 备件库存盘点�?
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "SparePartInventoryCheck")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class SparePartInventoryCheck : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new SparePartInventoryCheck object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="checkNumber">Initial value of CheckNumber.</param>
        public static SparePartInventoryCheck CreateSparePartInventoryCheck(int id, string checkNumber)
        {
            SparePartInventoryCheck sparePartInventoryCheck = new SparePartInventoryCheck();
            sparePartInventoryCheck.Id = id;
            sparePartInventoryCheck.CheckNumber = checkNumber;
            return sparePartInventoryCheck;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 盘点编号
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable = false)]
        [DataMemberAttribute()]
        public virtual string CheckNumber
        {
            get
            {
                string value = _CheckNumber;
                OnGetCheckNumber(ref value);
                return value;
            }
            set
            {
                if (_CheckNumber != value)
                {
                    OnCheckNumberChanging(ref value);
                    ReportPropertyChanging("CheckNumber");
                    _CheckNumber = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("CheckNumber");
                    OnCheckNumberChanged();
                }
            }
        }
        private string _CheckNumber;
        partial void OnGetCheckNumber(ref string value);
        partial void OnCheckNumberChanging(ref string value);
        partial void OnCheckNumberChanged();

        /// <summary>
        /// 盘点日期
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string CheckDate
        {
            get
            {
                string value = _CheckDate;
                OnGetCheckDate(ref value);
                return value;
            }
            set
            {
                if (_CheckDate != value)
                {
                    OnCheckDateChanging(ref value);
                    ReportPropertyChanging("CheckDate");
                    _CheckDate = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("CheckDate");
                    OnCheckDateChanged();
                }
            }
        }
        private string _CheckDate;
        partial void OnGetCheckDate(ref string value);
        partial void OnCheckDateChanging(ref string value);
        partial void OnCheckDateChanged();

        /// <summary>
        /// 备注
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Remarks
        {
            get
            {
                string value = _Remarks;
                OnGetRemarks(ref value);
                return value;
            }
            set
            {
                if (_Remarks != value)
                {
                    OnRemarksChanging(ref value);
                    ReportPropertyChanging("Remarks");
                    _Remarks = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Remarks");
                    OnRemarksChanged();
                }
            }
        }
        private string _Remarks;
        partial void OnGetRemarks(ref string value);
        partial void OnRemarksChanging(ref string value);
        partial void OnRemarksChanged();

        /// <summary>
        /// 操作�?
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Operator
        {
            get
            {
                string value = _Operator;
                OnGetOperator(ref value);
                return value;
            }
            set
            {
                if (_Operator != value)
                {
                    OnOperatorChanging(ref value);
                    ReportPropertyChanging("Operator");
                    _Operator = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Operator");
                    OnOperatorChanged();
                }
            }
        }
        private string _Operator;
        partial void OnGetOperator(ref string value);
        partial void OnOperatorChanging(ref string value);
        partial void OnOperatorChanged();

        #endregion
    }

    /// <summary>
    /// 备件库存盘点明细�?
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "SparePartInventoryCheckDetail")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class SparePartInventoryCheckDetail : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new SparePartInventoryCheckDetail object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static SparePartInventoryCheckDetail CreateSparePartInventoryCheckDetail(int id)
        {
            SparePartInventoryCheckDetail sparePartInventoryCheckDetail = new SparePartInventoryCheckDetail();
            sparePartInventoryCheckDetail.Id = id;
            return sparePartInventoryCheckDetail;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 盘点ID
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? CheckId
        {
            get
            {
                int? value = _CheckId;
                OnGetCheckId(ref value);
                return value;
            }
            set
            {
                if (_CheckId != value)
                {
                    OnCheckIdChanging(ref value);
                    ReportPropertyChanging("CheckId");
                    _CheckId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CheckId");
                    OnCheckIdChanged();
                }
            }
        }
        private int? _CheckId;
        partial void OnGetCheckId(ref int? value);
        partial void OnCheckIdChanging(ref int? value);
        partial void OnCheckIdChanged();

        /// <summary>
        /// 备件编号
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string SparePartNumber
        {
            get
            {
                string value = _SparePartNumber;
                OnGetSparePartNumber(ref value);
                return value;
            }
            set
            {
                if (_SparePartNumber != value)
                {
                    OnSparePartNumberChanging(ref value);
                    ReportPropertyChanging("SparePartNumber");
                    _SparePartNumber = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("SparePartNumber");
                    OnSparePartNumberChanged();
                }
            }
        }
        private string _SparePartNumber;
        partial void OnGetSparePartNumber(ref string value);
        partial void OnSparePartNumberChanging(ref string value);
        partial void OnSparePartNumberChanged();

        /// <summary>
        /// 库存数量
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? InventoryQuantity
        {
            get
            {
                int? value = _InventoryQuantity;
                OnGetInventoryQuantity(ref value);
                return value;
            }
            set
            {
                if (_InventoryQuantity != value)
                {
                    OnInventoryQuantityChanging(ref value);
                    ReportPropertyChanging("InventoryQuantity");
                    _InventoryQuantity = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("InventoryQuantity");
                    OnInventoryQuantityChanged();
                }
            }
        }
        private int? _InventoryQuantity;
        partial void OnGetInventoryQuantity(ref int? value);
        partial void OnInventoryQuantityChanging(ref int? value);
        partial void OnInventoryQuantityChanged();

        /// <summary>
        /// 实盘数量
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? ActualCountQuantity
        {
            get
            {
                int? value = _ActualCountQuantity;
                OnGetActualCountQuantity(ref value);
                return value;
            }
            set
            {
                if (_ActualCountQuantity != value)
                {
                    OnActualCountQuantityChanging(ref value);
                    ReportPropertyChanging("ActualCountQuantity");
                    _ActualCountQuantity = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ActualCountQuantity");
                    OnActualCountQuantityChanged();
                }
            }
        }
        private int? _ActualCountQuantity;
        partial void OnGetActualCountQuantity(ref int? value);
        partial void OnActualCountQuantityChanging(ref int? value);
        partial void OnActualCountQuantityChanged();

        #endregion
    }

    /// <summary>
    /// 备件类型
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "SparePartType")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class SparePartType : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new SparePartType object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static SparePartType CreateSparePartType(int id)
        {
            SparePartType sparePartType = new SparePartType();
            sparePartType.Id = id;
            return sparePartType;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 备注
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Remarks
        {
            get
            {
                string value = _Remarks;
                OnGetRemarks(ref value);
                return value;
            }
            set
            {
                if (_Remarks != value)
                {
                    OnRemarksChanging(ref value);
                    ReportPropertyChanging("Remarks");
                    _Remarks = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Remarks");
                    OnRemarksChanged();
                }
            }
        }
        private string _Remarks;
        partial void OnGetRemarks(ref string value);
        partial void OnRemarksChanging(ref string value);
        partial void OnRemarksChanged();

        #endregion
    }

    /// <summary>
    /// 计量单位
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "UnitOfMeasurement")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class UnitOfMeasurement : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new UnitOfMeasurement object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static UnitOfMeasurement CreateUnitOfMeasurement(int id)
        {
            UnitOfMeasurement unitOfMeasurement = new UnitOfMeasurement();
            unitOfMeasurement.Id = id;
            return unitOfMeasurement;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 备注
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Remarks
        {
            get
            {
                string value = _Remarks;
                OnGetRemarks(ref value);
                return value;
            }
            set
            {
                if (_Remarks != value)
                {
                    OnRemarksChanging(ref value);
                    ReportPropertyChanging("Remarks");
                    _Remarks = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Remarks");
                    OnRemarksChanged();
                }
            }
        }
        private string _Remarks;
        partial void OnGetRemarks(ref string value);
        partial void OnRemarksChanging(ref string value);
        partial void OnRemarksChanged();

        #endregion
    }

    /// <summary>
    /// 合作单位类型
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "UnitType")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class UnitType : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new UnitType object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static UnitType CreateUnitType(int id)
        {
            UnitType unitType = new UnitType();
            unitType.Id = id;
            return unitType;
        }

        #endregion

        #region Properties

        /// <summary>
        /// ID
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(ref value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();

        /// <summary>
        /// 单位类型�?
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string UnitTypeName
        {
            get
            {
                string value = _UnitTypeName;
                OnGetUnitTypeName(ref value);
                return value;
            }
            set
            {
                if (_UnitTypeName != value)
                {
                    OnUnitTypeNameChanging(ref value);
                    ReportPropertyChanging("UnitTypeName");
                    _UnitTypeName = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("UnitTypeName");
                    OnUnitTypeNameChanged();
                }
            }
        }
        private string _UnitTypeName;
        partial void OnGetUnitTypeName(ref string value);
        partial void OnUnitTypeNameChanging(ref string value);
        partial void OnUnitTypeNameChanged();

        /// <summary>
        /// 备注
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Remarks
        {
            get
            {
                string value = _Remarks;
                OnGetRemarks(ref value);
                return value;
            }
            set
            {
                if (_Remarks != value)
                {
                    OnRemarksChanging(ref value);
                    ReportPropertyChanging("Remarks");
                    _Remarks = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Remarks");
                    OnRemarksChanged();
                }
            }
        }
        private string _Remarks;
        partial void OnGetRemarks(ref string value);
        partial void OnRemarksChanging(ref string value);
        partial void OnRemarksChanged();

        #endregion
    }

    /// <summary>
    /// 用户信息视图
    /// </summary>
    /// <KeyProperties>
    /// Username
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName = "ImModel", Name = "UserInfoView")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class UserInfoView : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new UserInfoView object.
        /// </summary>
        /// <param name="username">Initial value of Username.</param>
        public static UserInfoView CreateUserInfoView(string username)
        {
            UserInfoView userInfoView = new UserInfoView();
            userInfoView.Username = username;
            return userInfoView;
        }

        #endregion

        #region Properties

        /// <summary>
        /// 用户�?
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public virtual string Username
        {
            get
            {
                string value = _Username;
                OnGetUsername(ref value);
                return value;
            }
            set
            {
                if (_Username != value)
                {
                    OnUsernameChanging(ref value);
                    ReportPropertyChanging("Username");
                    _Username = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Username");
                    OnUsernameChanged();
                }
            }
        }
        private string _Username;
        partial void OnGetUsername(ref string value);
        partial void OnUsernameChanging(ref string value);
        partial void OnUsernameChanged();

        /// <summary>
        /// 全名
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string FullName
        {
            get
            {
                string value = _FullName;
                OnGetFullName(ref value);
                return value;
            }
            set
            {
                if (_FullName != value)
                {
                    OnFullNameChanging(ref value);
                    ReportPropertyChanging("FullName");
                    _FullName = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("FullName");
                    OnFullNameChanged();
                }
            }
        }
        private string _FullName;
        partial void OnGetFullName(ref string value);
        partial void OnFullNameChanging(ref string value);
        partial void OnFullNameChanged();

        /// <summary>
        /// 邮件
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Email
        {
            get
            {
                string value = _Email;
                OnGetEmail(ref value);
                return value;
            }
            set
            {
                if (_Email != value)
                {
                    OnEmailChanging(ref value);
                    ReportPropertyChanging("Email");
                    _Email = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Email");
                    OnEmailChanged();
                }
            }
        }
        private string _Email;
        partial void OnGetEmail(ref string value);
        partial void OnEmailChanging(ref string value);
        partial void OnEmailChanged();

        /// <summary>
        /// 有效
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? Active
        {
            get
            {
                int? value = _Active;
                OnGetActive(ref value);
                return value;
            }
            set
            {
                if (_Active != value)
                {
                    OnActiveChanging(ref value);
                    ReportPropertyChanging("Active");
                    _Active = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Active");
                    OnActiveChanged();
                }
            }
        }
        private int? _Active;
        partial void OnGetActive(ref int? value);
        partial void OnActiveChanging(ref int? value);
        partial void OnActiveChanged();

        /// <summary>
        /// 角色
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Role
        {
            get
            {
                string value = _Role;
                OnGetRole(ref value);
                return value;
            }
            set
            {
                if (_Role != value)
                {
                    OnRoleChanging(ref value);
                    ReportPropertyChanging("Role");
                    _Role = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("Role");
                    OnRoleChanged();
                }
            }
        }
        private string _Role;
        partial void OnGetRole(ref string value);
        partial void OnRoleChanging(ref string value);
        partial void OnRoleChanged();

        /// <summary>
        /// 组织上级
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string OrganizationSuperior
        {
            get
            {
                string value = _OrganizationSuperior;
                OnGetOrganizationSuperior(ref value);
                return value;
            }
            set
            {
                if (_OrganizationSuperior != value)
                {
                    OnOrganizationSuperiorChanging(ref value);
                    ReportPropertyChanging("OrganizationSuperior");
                    _OrganizationSuperior = StructuralObject.SetValidValue(value, true);
                    ReportPropertyChanged("OrganizationSuperior");
                    OnOrganizationSuperiorChanged();
                }
            }
        }
        private string _OrganizationSuperior;
        partial void OnGetOrganizationSuperior(ref string value);
        partial void OnOrganizationSuperiorChanging(ref string value);
        partial void OnOrganizationSuperiorChanged();

        #endregion
    }

}
